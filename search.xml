<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020年5月9日</title>
    <url>/2020/05/09/2020%E5%B9%B45%E6%9C%889%E6%97%A5/</url>
    <content><![CDATA[<h2 id="2020年5月9日更新博客"><a class="markdownIt-Anchor" href="#2020年5月9日更新博客"></a> 2020年5月9日更新博客</h2>
<blockquote>
<p>半个多月过去了，抽时间基本完成了这个博客。</p>
</blockquote>
<p>技术栈的使用主要有:</p>
<ul>
<li>Nest搭建中台服务</li>
<li>React搭建前后台</li>
<li>Antd DesignUI</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年12月16日</title>
    <url>/2021/12/16/2021%E5%B9%B412%E6%9C%8816%E6%97%A5/</url>
    <content><![CDATA[<p>想起刚毕业在上海前几个月，那天我坐在出租屋里—阳光透过很小的玻璃洒进来，我脑海里想到的是，再也不会有人和我一起努力了。<br />
我很清醒的明白这一切，可我没有办法改变它。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>站在第三人称视角回到过去看自己</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年12月6日</title>
    <url>/2021/12/06/2021%E5%B9%B412%E6%9C%886%E6%97%A5/</url>
    <content><![CDATA[<p>佛说众生平等，为什么众生平等，因为众生皆苦。<br />
内耗自己没有意义，虚度人生。</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年3月17日小记</title>
    <url>/2021/03/17/2021%E5%B9%B43%E6%9C%8817%E6%97%A5%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>这个博客是用来记录一些技术相关的文章，但是也会用来当做抒写情绪的树洞，在这里发文章会让我感到一点安全感和精神上的放松。</p>
</blockquote>
<h4 id="近况"><a class="markdownIt-Anchor" href="#近况"></a> 近况</h4>
<p>近段时间当我在地铁上，当我正与人沟通时，当我在考场时，当我走在人群中，总是突然有哭泣的冲动，眼泪已经在眼眶中了，我心里明白我不能哭出来，北上广不相信眼泪，于是一天要忍受多次这样的情绪反复，晚上下班回到住的地方关上门就开始崩溃，好在只崩溃了几次。<br /><br />
其实我并没有任何事情，每天就是上下班的生活，收入也不算低，但内心很难找到人生的意义，也不能和自己和解，对于失去的人和物，总是难以释怀。<br /><br />
和家里的数次沟通后，情绪开始有所好转，我不能再让父母为我感到担心了，这是我要坚强的唯一理由。<br /></p>
<!--毕业的时候因一直找不到满意的工作而在街头抱怨哭泣，从而永远失去了本该美好的未来，那个时期的我太不成熟，很多次我都不能接受那个人竟是我自己。人只有经历彻底的痛苦才会有彻底的改变，其实生活都是会越来越好的，可惜刚毕业的自己并不懂什么叫做脚踏实地。-->
<h4 id="命运"><a class="markdownIt-Anchor" href="#命运"></a> 命运</h4>
<p>18年八月我在租的单间里，挑灯夜战学习，每天凌晨两点准备睡去之前，会去看一下当天的学习排行榜，我每次都是第二，虽然有点失落，但这让我明白总有人比我更努力，我要更加努力才行。<br /><br />
那段时间的我很充实，生活的极其认真，对未来充满想象，也正因为如此，我越发的不能和过去的自己和解，因为在那之前一个月我还是一个迷茫对生活只知道抱怨的毕业生。<br /><br />
彻底的失去会让人彻底的改变。<br /><br />
我为学生时期的自己感到惭愧，时间推到现在，这种长期以来的情绪像多米诺骨牌一样一个个坍塌，最终砸到了内心深处最痛苦的记忆，然而时间已经过去，人生的压力逐渐增大，现实生活的忙碌不能完全抵消内心的焦虑和痛苦，有点无解。<br/><br />
我在V站看到许多和我一样有情感困扰的小伙伴，有时我也会回帖开导一两句，可更多时候都只是安静的看着，无能为力。<br/><br />
就在那间小屋子里我悟到了一个词叫‘生命之线’。在18年春天我待业在家，为了讨一个姑娘欢心，我竟然莫名其妙的做了一个app，当时的我无论如何也没有想到app开发竟会成为我的职业，而当时的我是一个找不到工作，心态崩溃，对未来没有任何积极规划的人。很多次我都会想这算不算老天给我的最后一次暗示，如果当时我就能明白，我的人生是否也会是幸福的一生。再也不会有答案了。<br/></p>
<h4 id="重逢"><a class="markdownIt-Anchor" href="#重逢"></a> 重逢</h4>
<p>前段时间我在V站发表了一个帖子叫做[人生会有重逢吗]，竟收到了221条回帖，我看着这些回帖，看着别人的故事，热泪盈眶，每个人都是如此的遗憾，只能带着这种遗憾走下去，时间消磨不了痛苦，无非是在时间的流逝中慢慢忘记，可这对于记性很好的人来说是一种痛苦。<br /><br />
人生会有重逢吗？ 好像没有人能回答有或者没有。<br /></p>
<h4 id="人生"><a class="markdownIt-Anchor" href="#人生"></a> 人生</h4>
<p>去年的时候，父亲生病，家里人没有选择告诉在外工作的我，当我得知时，父亲已经转危为安一段时间了，我无法想象当时的情况。<br><br />
那天我加班到凌晨五点，醒来后和父亲电话，从只言片语中知道了一些细节，挂掉电话后痛哭起来，满脑子都是回家。这件事情让我感受到了前所未有的压力，那种人生使命感，印象中的父亲形象突然没有了，时间开始变的恍惚，似乎儿时的笑容就在昨天。<br><br />
我无法原谅自己和父亲的所有争吵，可我又不知如何与他交流，有那么一瞬间，真的觉得父亲老了。<br><br />
仿佛小时候父亲去学校找到我，告诉我说给我买了一个篮球，似乎就发生在前不久一段时间。<br><br />
人生真的就是一场修行，太苦了。<br></p>
<h4 id="未来"><a class="markdownIt-Anchor" href="#未来"></a> 未来</h4>
<p>不敢去想未来了，只希望家人可以健康平安，刚毕业的我不顾一切想要出头，独自在外打拼觉得是一种能力的表现，而现在只想早早的回老家陪陪父母，虽然没有爱人，但能够有父母的陪伴也是幸福的。<br><br />
母亲打电话总是说相亲的事情，欲言又止，其实我明白母亲没有说出的话是什么。我时常觉得我这辈子就只能孤独的活着了，可有时候又会羡慕别人充满烟火气的生活，就这样时间慢慢的过去了，我很清楚，但无可奈何。</p>
<h4 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h4>
<p>2021要做的事情很多，没有意义或许就是一种意义。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>人生</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年5月5日</title>
    <url>/2021/05/05/2021%E5%B9%B45%E6%9C%885%E6%97%A5/</url>
    <content><![CDATA[<p>五一劳动节回了家，这是毕业后第一次夏天在家，很舒3服。<br ><br />
和兄弟几个在县城吃了饭喝了酒，感受到了美好的生活节奏，生活就该如此啊!<br><br />
此刻回到了上海，感觉像是重生一样，我又活过来了，双相障碍Ⅱ型症状好像在减少了，这次回家对我来讲太治愈了</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>舒服</tag>
        <tag>美好</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年终总结</title>
    <url>/2022/01/02/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="2021年总结"><a class="markdownIt-Anchor" href="#2021年总结"></a> 2021年总结</h4>
<ol>
<li>读书7本</li>
<li>听歌50首</li>
<li>跑步16.82公里，223分钟</li>
<li>外卖6315元</li>
<li>写博客23篇</li>
<li>B站使用127天，总时长89.9小时</li>
<li>代码提交天数329天</li>
<li>骑行约12公里</li>
</ol>
<p>以上数据来源：</p>
<ol>
<li>微信读书</li>
<li>网易云音乐</li>
<li>运动</li>
<li>美团</li>
<li><a class="link"   href="http://www.sonders.cn" >www.sonders.cn<i class="fas fa-external-link-alt"></i></a></li>
<li>Bilibili</li>
<li>github</li>
</ol>
<p>今年的收获</p>
<ol>
<li>收入翻番</li>
<li>多点亮技能树1个</li>
<li>精神状态逐渐好转，接受过去</li>
<li>喜欢上了读哲学类的书，如《沉思录》</li>
<li>基金理财数字货币收益占18%</li>
<li>为家里人新添了彩电手机电脑等产品，很有贡献感</li>
<li>按计划考过了三门课程</li>
</ol>
<p>今年的反思</p>
<ol>
<li>读书太少</li>
<li>外卖太多，应该多注意饮食</li>
<li>没有定义止盈止损最高节点</li>
<li>应当放眼未来而不是追悔过去，人要学会放下和接受</li>
<li>控制自卑，要变得自信起来</li>
<li>保持学习的热情，持续提高自己</li>
</ol>
]]></content>
      <categories>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>2021</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2022/9/5</title>
    <url>/2022/09/05/2022-9-5/</url>
    <content><![CDATA[<p>痛苦</p>
]]></content>
  </entry>
  <entry>
    <title>2022年08月30日</title>
    <url>/2022/08/30/2022%E5%B9%B408%E6%9C%8830%E6%97%A5/</url>
    <content><![CDATA[<p>前几日体检结果下来，动脉粥样硬化竟高于正常值0.3，属于偏高。<br />
以后要主要作息和饮食了</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年12月04日</title>
    <url>/2022/12/04/2022%E5%B9%B412%E6%9C%8804%E6%97%A5/</url>
    <content><![CDATA[<p>今天是12月4号，周日，天气变冷。<br />
想不起以前的冬天是怎么度过的了，因为春夏秋冬我都是一个被子，而今年这个冬天非常寒冷，睡觉翻个身都冻的不行。<br />
所以连夜买了电热毯，但是一个被子的问题还是无法解决，又不想再买被子，于是就这样过了两天，受不了，又买了一个洗脚盆，买了一个棉拖，买了一套保暖内衣，寒冷的问题似乎有所改善。<br />
可能是随着年龄的增长，身体已经不允许对抗自然条件了。<br />
这个月是2022年最后一个月，这一年就要过去了，而明年后怎么样，会发生什么，一无所知，似乎迷茫更多了。<br />
今年读了16本书，正在读傅高义的《邓小平时代》。<br />
今年是疫情的第三年，国内发生了很多让人糟心的事，不过今天上海发布通知说，明天0点开始，公共场所包括公共交通不再检查核酸检测证明，这似乎是一个好消息，到年底不知道能不能放开，其实放不放开对我的工作生活没有什么影响，但我还是希望能够放开，虽然我对于放开有一点健康担心。<br />
记得去年计划着今年节假日能够去旅游，可是因为种种原因，没有得以实现，我很想到各地去看一看，也想去国外看一看，可是身上还有别的事，不能随心所欲，争取出去旅游一次，放松一下身心，我太累了。<br />
如果能够有机会去国外，我想去美国，新西兰，阿根廷，日本，去这些国家看一看，尝尝当地的美食。<br />
已经工作四五年了，似乎这四五年里发生了很多事，又似乎什么都没发生，我只知道从没停下来去享受生活，我现在非常想要停下来享受生活，可是我又害怕停下来会不适应，只能保持现状。<br />
年底了，要做的事还是有很多，我很害怕改变，希望我能有一个幸福的结局。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年1月12日</title>
    <url>/2022/01/12/2022%E5%B9%B41%E6%9C%8812%E6%97%A5/</url>
    <content><![CDATA[<p>心烦意乱</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年7月15日</title>
    <url>/2022/07/15/2022%E5%B9%B47%E6%9C%8815%E6%97%A5/</url>
    <content><![CDATA[<h3 id="睡觉"><a class="markdownIt-Anchor" href="#睡觉"></a> 睡觉</h3>
<p>最近作息时间正常了，每天睡得很早，醒来后也很有精神，真是舒服的状态，我很喜欢规律的感觉。<br />
由于疫情的原因，有好几个月没有跑步了，跑一公里就会气喘吁吁，还是要多运动，运动真的会使心情放松和情绪缓解。</p>
<h3 id="看书"><a class="markdownIt-Anchor" href="#看书"></a> 看书</h3>
<p>最近三个月看了四五本书（包括在看），全是关于经济类的，有些基本常识能够以书面的形式理解下来，还是别有趣味，也多了一种开阔的感觉。<br />
看理性类的书，有很多数据支撑，有时非常枯燥，但是专注进去就会非常有趣和充实，像小说类的书，其实也有很好的，但是以情感较多，虽然很扣人心弦，可是总是没有以数据支撑的书来的真实。这是最近的感受。</p>
<h3 id="时间"><a class="markdownIt-Anchor" href="#时间"></a> 时间</h3>
<p>当专注在一件事情上时，时间就会变得不够用，也没那么多负面情绪了。负面情绪只是自己控制不住自己的一种表现，当一个人真的做到控制自己的身体和思想的时候，就非常有力量。</p>
<h3 id="金钱"><a class="markdownIt-Anchor" href="#金钱"></a> 金钱</h3>
<p>希望我能赚更多钱哈哈。<br />
做事情目的很重要，赚钱的目的也很重要，赚了钱之后呢，就是为了过更好的生活，把钱当做工具或者手段看待，更好的生活才是目的。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>金钱</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code配置GoLang</title>
    <url>/2020/07/10/Code%E9%85%8D%E7%BD%AEGoLang/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/10/43MJlz1RLsCTqoP.png"
                      alt="image" 
                ><br />
安装go</p>
<p><a class="link"   href="https://golang.google.cn/doc/install?download=go1.14.4.windows-amd64.msi" >https://golang.google.cn/doc/install?download=go1.14.4.windows-amd64.msi<i class="fas fa-external-link-alt"></i></a></p>
<p>新建一个工作区 GOPATH:</p>
<p>新建文件夹GO_ -》 创建 src bin pkg 三个文件夹</p>
<p>配置GOPATH：</p>
<p>系统变量 -》 新建 -》 变量名 GOPATH -》 变量值 （GO_ 文件夹所在的路径）</p>
<p>path -》 将安装地址添加进去  如：D:\GO\bin （安装时自动添加）</p>
<p>用户变量 -》 path %USERPROFILE%\go\bin （安装时自动添加）</p>
<p>配置代理 <a class="link"   href="https://goproxy.io/zh/" >https://goproxy.io/zh/<i class="fas fa-external-link-alt"></i></a></p>
<p>终端执行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env -w GO111MODULE=on</span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//goproxy.io,direct</span></span><br></pre></td></tr></table></figure>
<p>在GOPATH的src文件夹下新建 <a class="link"   href="http://golang.org" >golang.org<i class="fas fa-external-link-alt"></i></a> 及子文件夹 x 执行<br />
<br /></p>
<p><code>git clone https://github.com/golang/tools.git tools</code></p>
<p>打开vscode 执行  <strong>ctrl + shift + p</strong>  <br /></p>
<p>搜索<strong>Go:install/Update Tools</strong>  <br /></p>
<p>全选 -》 <strong>确定</strong></p>
<p>如果一切正常，则开始下载安装了。</p>
<p>如果不正常，则重新试一下，说不定会出现   SUCCEEDED<br /></p>
<p>如果一直失败，先不要慌，可以这样来做：<br /></p>
<p>根据失败提示，找到下载的git地址，这里以gocode为例<br /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone  https://github.com/mdempsky/gocode.git  gocode</span><br></pre></td></tr></table></figure>
<p>在GOPATH下src对应的目录里执行上面的git  clone指令，如果没有这个文件夹就创建（<a class="link"   href="http://github.com" >github.com<i class="fas fa-external-link-alt"></i></a> -》mdempsky ）<br /></p>
<p>回到vscode里，在GOPATH打开终端 <text style='color:green'>ctrl + `</text>  ，执行 <br /></p>
<p><code>go get -v  github.com/mdempsky/gocode</code></p>
<p>这个时候，你的bin目录里就会有<strong>gocode.exe</strong>了</p>
<p>其他的同理，既可。<br /></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>本地测试</tag>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6新增方法和属性</title>
    <url>/2019/05/23/ES6%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95%E5%92%8C%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>字符串扩展：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.<span class="title function_">includes</span>(s)     <span class="comment">//检测字符串中是否含有参数代表的字符  返回布尔值；</span></span><br><span class="line">str. <span class="title function_">startsWith</span>(s)  <span class="comment">// str.  endsWith(s)  检测是否以参数开头或结尾，返回布尔值；</span></span><br><span class="line">str.<span class="title function_">repeat</span>(n)       <span class="comment">//n为多少，就重复字符串多少次 ;</span></span><br><span class="line">str.<span class="title function_">padStart</span>(n,s)   <span class="comment">// str.padEnd(n,s)  第一个参数代表新字符串的位数，原字符串如果不够n位，则补充到n位，补充内容为s；</span></span><br></pre></td></tr></table></figure>
<br />
模板字符串：
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ˋ这里是字符串$&#123;变量名&#125;ˋ </span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">str = <span class="string">`&lt;li&gt;<span class="subst">$&#123;num&#125;</span>&lt;/li&gt;`</span>;</span><br></pre></td></tr></table></figure>
<p>函数扩展：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">函数参数默认值</span><br><span class="line"><span class="keyword">function</span>  <span class="title function_">foo</span>(<span class="params">a=<span class="number">1</span>,b</span>)&#123; </span><br><span class="line">    <span class="comment">// To do sth.</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">//可以在形参里写上默认参数，但是在调用时的实参是会替换的；</span></span><br><span class="line"><span class="comment">//函数的length属性</span></span><br><span class="line"><span class="comment">//形参就是函数的length的长度（个数）；</span></span><br><span class="line"><span class="comment">//rest参数：</span></span><br><span class="line"><span class="comment">//rest参数接受函数多余参数，形成数组；实参会传入这个数组里，如果有其他形参，则剩下的参数会放到rest里；</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...rest</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(rest)&#125; ；</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>()  <span class="comment">//将一个类数组对象或者可遍历对象转成真的  数组；</span></span><br><span class="line"><span class="keyword">var</span> str  = <span class="string">&quot;abcd&quot;</span>；<span class="title class_">Array</span>.<span class="title function_">from</span>(str);<span class="comment">//[&quot;a&quot;，&quot;b&quot;，&quot;c&quot;，&quot;d&quot;]；</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>()</span><br><span class="line"><span class="comment">//方法总是返回参数值组成的数组。如果没有参数，就返回一个空数组;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//set结构：一种新的数据结构，类似数组，返回值不重复；</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;参数&#x27;</span>])；</span><br><span class="line"><span class="comment">//返回的参数是一个数组，且没有重复；（去重）；</span></span><br><span class="line"><span class="comment">//假如参数是一个字符串则返回&#123;&#125;，并不是一个数组，需要其他方法来转成字符串，通过Array.from()转为数组；</span></span><br><span class="line"><span class="title function_">keys</span>()：<span class="comment">//返回键名的遍历器for (let item of set.keys()) &#123; console.log(item); &#125;</span></span><br><span class="line"><span class="title function_">values</span>()：<span class="comment">//返回键值的遍历器</span></span><br><span class="line"><span class="title function_">entries</span>()：<span class="comment">//返回键值对的遍历器</span></span><br><span class="line"><span class="title function_">forEach</span>()：<span class="comment">//使用回调函数遍历每个成员set.forEach((value, key) =&gt; console.log(value * 2) )</span></span><br><span class="line"><span class="comment">//Map结构：一种新的数据结构，类似对象；</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;john&quot;</span>],[<span class="string">&quot;age&quot;</span>,<span class="number">30</span>]]);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">map.<span class="property">size</span> <span class="comment">//长度</span></span><br><span class="line">map.<span class="title function_">set</span>(key,value);map.<span class="title function_">get</span>(key);map.<span class="title function_">delete</span>(key);map.<span class="title function_">has</span>(key);map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="title function_">keys</span>()：<span class="comment">//返回键名的遍历器</span></span><br><span class="line"><span class="title function_">values</span>()：<span class="comment">//返回键值的遍历器</span></span><br><span class="line"><span class="title function_">entries</span>()：<span class="comment">//返回键值对的遍历器for (let [key, value] of map.entries()) &#123; console.log(key, value); &#125;</span></span><br><span class="line"><span class="title function_">forEach</span>()：<span class="comment">//使用回调函数遍历每个成员map.forEach((value, key) =&gt; console.log(value * 2) )</span></span><br><span class="line"><span class="comment">//箭头函数：</span></span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt;<span class="number">10</span>; <span class="comment">// 只含一个表达式   例如 </span></span><br><span class="line"><span class="number">2.</span>含有多条语句；</span><br><span class="line"><span class="number">3.</span><span class="variable language_">this</span>的指向问题； 在箭头函数中，<span class="variable language_">this</span>指向要看&#123;&#125;外面的<span class="variable language_">this</span>指向什么；正常函数里看是谁触发的函数；</span><br><span class="line"><span class="number">4.</span>在哪定义的<span class="variable language_">this</span>就指向谁；</span><br><span class="line"></span><br><span class="line">生成器函数：</span><br><span class="line"><span class="keyword">function</span>*<span class="title function_">foo</span>(<span class="params"></span>)&#123;<span class="keyword">yield</span> a &#125;  <span class="keyword">var</span> f  = <span class="title function_">foo</span>(<span class="number">1</span>); f.<span class="title function_">next</span>();  <span class="keyword">yield</span> <span class="comment">// 暂停 并返回后面跟的值，也就是那个value;</span></span><br><span class="line"><span class="title class_">Symbol</span>: 一种新的原始数据类型，只要是为了避免属性名的重复；</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;zhang&quot;</span>&#125;;  <span class="keyword">var</span> s = <span class="title class_">Symbol</span>(); obj[s] = <span class="string">&quot;li&quot;</span>；</span><br><span class="line"><span class="variable language_">this</span>指向： <span class="title function_">call</span>()  <span class="title function_">apply</span>()  <span class="title function_">bind</span>() ;  会改变<span class="variable language_">this</span>指向；严格模式下，在函数内部定义的  看包含的父级；正常模式下，看触发函数的事件源是谁；</span><br><span class="line">obj.方法名.<span class="title function_">call</span>(obj2,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//单个参数列表；</span></span><br><span class="line">obj.方法名.<span class="title function_">apply</span>(obj2,[<span class="number">1</span>,<span class="number">2</span>]);<span class="comment">//将要传递的参数放到数组里；</span></span><br><span class="line">obj.方法名.<span class="title function_">bind</span>(obj2)(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//放到后面；</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>IM集成</title>
    <url>/2022/09/05/IM%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<h3 id="融云im集成"><a class="markdownIt-Anchor" href="#融云im集成"></a> 融云IM集成</h3>
<blockquote>
<p>融云即时通讯产品支持单聊、群聊、超级群、聊天室 多种业务形态，提供丰富的客户端和服务端接口，大部分能力支持开箱即用。</p>
</blockquote>
<p>融云的架构设计特点：</p>
<ul>
<li>无需改变现有 App 的架构，直接嵌入现有代码框架中；</li>
<li>无需改变现有 App Server 的架构，独立部署一份用于用户授权的 Service 即可；</li>
<li>专注于提供通讯能力，使用私有的二进制通信协议，消息轻量、有序、不丢消息；</li>
<li>安全的身份认证和授权方式，无需担心 SDK 能力滥用（盗用身份的垃圾消息、垃圾群发）问题。</li>
</ul>
<h3 id="客户端集成"><a class="markdownIt-Anchor" href="#客户端集成"></a> 客户端集成</h3>
<h4 id="导入sdk"><a class="markdownIt-Anchor" href="#导入sdk"></a> 导入SDK</h4>
<p>可以参考官方<a class="link"   href="https://doc.rongcloud.cn/im/Web/5.X/noui/import" >文档<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装 IM 5.0 最新版本</span></span><br><span class="line">npm install @rongcloud/engine@latest @rongcloud/imlib-next@latest -S</span><br><span class="line"></span><br><span class="line"><span class="comment">// CMD</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RongIMLib</span> = <span class="built_in">require</span>(<span class="string">&#x27;@rongcloud/imlib-next&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">RongIMLib</span> <span class="keyword">from</span> <span class="string">&#x27;@rongcloud/imlib-next&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CDN链接</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.ronghub.com/RongIMLib-5.3.0.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">RongIMLib</span>.<span class="title function_">init</span>(&#123;</span><br><span class="line">    <span class="attr">appkey</span>: <span class="string">&#x27;xxxxxx&#x27;</span> <span class="comment">//  这里是在融云控制台申请的应用appkey</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加事件监听</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Events</span> = <span class="title class_">RongIMLib</span>.<span class="property">Events</span></span><br><span class="line"><span class="title class_">RongIMLib</span>.<span class="title function_">addEventListener</span>(<span class="title class_">Events</span>.<span class="property">CONNECTING</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在链接服务器&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">RongIMLib</span>.<span class="title function_">addEventListener</span>(<span class="title class_">Events</span>.<span class="property">CONNECTED</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已经链接到服务器&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">RongIMLib</span>.<span class="title function_">addEventListener</span>(<span class="title class_">Events</span>.<span class="property">MESSAGES</span>, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到消息&#x27;</span>, res)</span><br><span class="line">    <span class="comment">// res.messages 这里收到消息后进行展示处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="用户连接im"><a class="markdownIt-Anchor" href="#用户连接im"></a> 用户连接IM</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// token 用户的token</span></span><br><span class="line">    <span class="title class_">RongIMLib</span>.<span class="title function_">connect</span>(token).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="title class_">RongIMLib</span>.<span class="property">ErrorCode</span>.<span class="property">SUCCESS</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接成功, 链接用户 id 为: &#x27;</span>, res.<span class="property">data</span>.<span class="property">userId</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;链接失败, code:&#x27;</span>, res.<span class="property">code</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="发送消息"><a class="markdownIt-Anchor" href="#发送消息"></a> 发送消息</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义消息投送目标会话</span></span><br><span class="line"><span class="keyword">const</span> conversation = &#123;</span><br><span class="line">    <span class="attr">conversationType</span>: <span class="title class_">RongIMLib</span>.<span class="property">ConversationType</span>.<span class="property">PRIVATE</span>,</span><br><span class="line">    <span class="attr">targetId</span>: <span class="string">&quot;userID&quot;</span> <span class="comment">// 这里是接收人ID</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送文本（表情）消息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendTextMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 实例化待发送消息，RongIMLib.TextMessage 为内置文本型消息</span></span><br><span class="line">    <span class="keyword">const</span> message = <span class="keyword">new</span> <span class="title class_">RongIMLib</span>.<span class="title class_">TextMessage</span>(&#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;这里是发送的文本消息内容&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 发送</span></span><br><span class="line">    <span class="title class_">RongIMLib</span>.<span class="title function_">sendMessage</span>(conversation, message).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送回调&#x27;</span>, res)</span><br><span class="line">        <span class="comment">// 发送成功后展示到对话框中</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  发送图片消息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendImgMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// file = &lt;input type=&quot;file&quot; /&gt; 所选的文件信息</span></span><br><span class="line">    <span class="keyword">const</span> msgBody = &#123;</span><br><span class="line">        file, <span class="comment">// 待上传文件</span></span><br><span class="line">        <span class="attr">user</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">portraitUri</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">extra</span>: <span class="string">&#x27;&#x27;</span> &#125;, <span class="comment">// 消息中携带的用户信息，非必填</span></span><br><span class="line">        <span class="attr">extra</span>: <span class="string">&quot;连同图片一起发送的文本&quot;</span> <span class="comment">// 消息中携带的透传信息，非必填</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> hooks = &#123;</span><br><span class="line">        onProgress (progress) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;progress&quot;</span>, progress)</span><br><span class="line">        &#125;,  <span class="comment">// 上传进度监听，可选</span></span><br><span class="line">        onComplete (fileInfo) &#123; <span class="comment">// 上传完成时的回调钩子，可选</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(fileInfo.<span class="property">url</span>) <span class="comment">// 文件存储地址 图片cdn链接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        <span class="attr">contentDisposition</span>: <span class="string">&#x27;inline&#x27;</span> <span class="comment">// &#x27;inline&#x27; | &#x27;attachment&#x27; , 使用 aws 上传时返回链接在浏览器中的展示形式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">RongIMLib</span>.<span class="title function_">sendImageMessage</span>(conversation,msgBody,hooks,options).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; code, data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">// 发送回调结果</span></span><br><span class="line">        <span class="keyword">if</span> (code === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 发送成功 可以展示到对话框的还有消息侧</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;图片发送失败&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="自定义消息"><a class="markdownIt-Anchor" href="#自定义消息"></a> 自定义消息</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册自定义消息  s:person 自定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PersonMessage</span> = <span class="title class_">RongIMLib</span>.<span class="title function_">registerMessageType</span>(<span class="string">&#x27;s:person&#x27;</span>, <span class="literal">false</span>, <span class="literal">false</span>, [], <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 构建要发送的自定义消息</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="keyword">new</span> <span class="title class_">PersonMessage</span>([&#123;<span class="attr">desc</span>: <span class="string">&quot;查询订单号&quot;</span>, <span class="attr">orderID</span>: <span class="number">123</span>&#125;,&#123;<span class="attr">desc</span>: <span class="string">&quot;查询我是谁&quot;</span>, <span class="attr">orderID</span>: <span class="number">123</span>&#125;])</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line"><span class="title class_">RongIMLib</span>.<span class="title function_">sendMessage</span>(&#123;</span><br><span class="line">    <span class="attr">conversationType</span>: <span class="title class_">RongIMLib</span>.<span class="property">ConversationType</span>.<span class="property">PRIVATE</span>,</span><br><span class="line">    <span class="attr">targetId</span>: <span class="string">&quot;userID&quot;</span></span><br><span class="line">&#125;, message).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">code</span>, res.<span class="property">data</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">code</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="表情加载"><a class="markdownIt-Anchor" href="#表情加载"></a> 表情加载</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.ronghub.com/RongEmoji-2.2.10.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"> <span class="comment">// 表情信息可参考 http://unicode.org/emoji/charts/full-emoji-list.html</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">size</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;//f2e.cn.ronghub.com/sdk/emoji-48.png&#x27;</span>,</span><br><span class="line">    <span class="attr">lang</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">extension</span>: &#123;</span><br><span class="line">        <span class="attr">dataSource</span>: &#123;</span><br><span class="line">            <span class="attr">u1F914</span>: &#123; <span class="comment">// 自定义 u1F914 对应的表情</span></span><br><span class="line">                <span class="attr">en</span>: <span class="string">&#x27;thinking face&#x27;</span>, <span class="comment">// 英文名称</span></span><br><span class="line">                <span class="attr">zh</span>: <span class="string">&#x27;思考&#x27;</span>, <span class="comment">// 中文名称</span></span><br><span class="line">                <span class="attr">tag</span>: <span class="string">&#x27;🤔&#x27;</span>, <span class="comment">// 原生 Emoji</span></span><br><span class="line">                <span class="attr">position</span>: <span class="string">&#x27;0 0&#x27;</span> <span class="comment">// 所在背景图位置坐标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;//cdn.ronghub.com/thinking-face.png&#x27;</span> <span class="comment">// 新增 Emoji 背景图 url</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">RongIMLib</span>.<span class="property">RongIMEmoji</span>.<span class="title function_">init</span>(config);</span><br><span class="line"><span class="comment">// RongIMEmojiList 是表情列表 可展示到view中供选择</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RongIMEmojiList</span> = <span class="title class_">RongIMLib</span>.<span class="property">RongIMEmoji</span>.<span class="property">list</span>;</span><br><span class="line"><span class="comment">// 部分示例</span></span><br><span class="line">😊😭😂💔😑😟🐶🎉📢🤔🌙💤🍦🚀</span><br></pre></td></tr></table></figure>
<h4 id="关于语音视频通话"><a class="markdownIt-Anchor" href="#关于语音视频通话"></a> 关于语音/视频通话</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入一下链接  顺序不变</span></span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.ronghub.com/RongIMLib-5.3.0.prod.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">// RTCLib v5</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.ronghub.com/RCRTC-5.3.12.prod.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> <span class="comment">// RongCallLib</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.ronghub.com/RCCall-5.0.latest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 当RongIMLib.connect连接成功后，在成功回调中初始化音视频</span></span><br><span class="line"> rtcClient = <span class="title class_">RongIMLib</span>.<span class="title function_">installPlugin</span>(<span class="variable constant_">RCRTC</span>.<span class="property">installer</span>)</span><br><span class="line">    caller = <span class="title class_">RongIMLib</span>.<span class="title function_">installPlugin</span>(<span class="title class_">RCCall</span>.<span class="property">installer</span>, &#123;</span><br><span class="line">        rtcClient, </span><br><span class="line">        <span class="title function_">onSession</span>(<span class="params">session</span>)&#123;</span><br><span class="line">            session.<span class="title function_">registerSessionListener</span>(&#123;</span><br><span class="line">                <span class="comment">// 这里的内容参考开发文档</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我这里由于业务不需要音视频所以没有深度测试，只是简单测试了下打电话功能，暂时不做仔细记录</span></span><br></pre></td></tr></table></figure>
<h4 id="展示对话框"><a class="markdownIt-Anchor" href="#展示对话框"></a> 展示对话框</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/1.1n3x6v41v3c0.webp"
                      alt="1" 
                ></p>
<h3 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h3>
<p>本文仅以WEB客户端集成做记录，如果是实现聊天对话客服功能，完全够用了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>IM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSpringBoot</title>
    <url>/2022/09/06/JavaSpringBoot/</url>
    <content><![CDATA[<h4 id="java项目创建"><a class="markdownIt-Anchor" href="#java项目创建"></a> Java项目创建</h4>
<ul>
<li>新建 -》 项目 选择 <strong>Spring Initializr</strong></li>
<li>在下一步之前选择服务URL，确保<strong><a class="link"   href="https://start.spring.io/" >https://start.spring.io/<i class="fas fa-external-link-alt"></i></a></strong> 可访问，如不能访问，可自定义设置，我配置了 <strong><a class="link"   href="https://start.aliyun.com/" >https://start.aliyun.com/<i class="fas fa-external-link-alt"></i></a></strong></li>
<li>点击下一步，在添加依赖里，选择 <strong>Web</strong> -》 勾选 <strong>Spring Web</strong>，以及 <strong>Developer Tools</strong> 勾选 <strong>lombok</strong> （其他可之后添加，也可仅先添加web）</li>
</ul>
<h4 id="启动项目"><a class="markdownIt-Anchor" href="#启动项目"></a> 启动项目</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/%E5%90%AF%E5%8A%A8.6ftx9a6b7ac0.webp"
                      alt="启动" 
                ></p>
<p>找到项目中的DemoApplication，其中有main方法的类，启动SpringBoot运行main</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/5.5ltyxxrkz040.webp"
                      alt="5" 
                ></p>
<p>出现以上图像，说明启动成功， 访问<a class="link"   href="http://localhost:8080" >http://localhost:8080<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="创建controller"><a class="markdownIt-Anchor" href="#创建controller"></a> 创建Controller</h4>
<p>找到项目中 src -》 main -》 java -》 com 下新建controller目录，然后在该目录下新建类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/GetUserList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">GetUser</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Object&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">        HashMap&lt;String, Object&gt; model = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        model.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;sonder&quot;</span>);</span><br><span class="line">        model.put(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        model.put(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        userList.add(model);</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br />
<br />
访问http://localhost:8080/GetUserList 可得到用户列表的Json数据
<p>下一章，数据库的应用</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库导入导出</title>
    <url>/2020/10/07/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<blockquote>
<p>需要将数据库导出的时候，用到两条命令，这里记录一下</p>
</blockquote>
<p>导出： mongodump -h 127.0.0.1:27017 -d dbname -o D:\data\dump</p>
<p>导入：mongorestore -h host:port -d dbnameNew --dir D:\data\dump\dbname</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Jest</title>
    <url>/2020/06/07/Jest/</url>
    <content><![CDATA[<h4 id="四个钩子函数"><a class="markdownIt-Anchor" href="#四个钩子函数"></a> 四个钩子函数</h4>
<ul>
<li>beforeAll</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// beforeAll(()  =&gt; &#123;</span></span><br><span class="line"><span class="comment">//    console.log(&#x27;所有测试用例之前执行&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>beforeEach</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// beforeEach(()  =&gt; &#123;</span></span><br><span class="line"><span class="comment">//    console.log(&#x27;每个测试用例之前执行&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>afterEach</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// afterEach(()  =&gt; &#123;</span></span><br><span class="line"><span class="comment">//    console.log(&#x27;每个测试用例之后执行&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>afterAll</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// afterAll(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;所有测试用例之后执行&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure>
<h4 id="介绍几个匹配器"><a class="markdownIt-Anchor" href="#介绍几个匹配器"></a> 介绍几个匹配器</h4>
<table>
<thead>
<tr>
<th>methods</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>toBe</td>
<td>完全匹配 ===</td>
</tr>
<tr>
<td>toEqual1</td>
<td>只要能容一样即可</td>
</tr>
</tbody>
</table>
<p>参考：<a class="link"   href="https://jspang.com/detailed?id=63#toc336" >https://jspang.com/detailed?id=63#toc336<i class="fas fa-external-link-alt"></i></a></p>
<p>注意：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若makeL是一个方法 则错误  </span></span><br><span class="line"><span class="title function_">expect</span>(makeLove.<span class="property">makeL</span>).<span class="title function_">toEqual</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"><span class="comment">// 正确示例 makeL() 加括号调用</span></span><br><span class="line"><span class="title function_">expect</span>(makeLove.<span class="title function_">makeL</span>()).<span class="title function_">toEqual</span>(<span class="string">&quot;xxx&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Jest</category>
      </categories>
      <tags>
        <tag>Jest</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM切换</title>
    <url>/2020/08/05/NPM%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<blockquote>
<p>因为发布NPM插件的原因，经常要用到NPM源的切换，这里快捷记录一下</p>
</blockquote>
<p>查看当前镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm get registry </span><br></pre></td></tr></table></figure>
<p>设置淘宝镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>恢复原先镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>NestJS如何调用第三方接口</title>
    <url>/2021/03/19/NestJS%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<blockquote>
<p>当我把项目部署到刚买的良心云服务器之后，发觉项目中的一个第三方接口出现了跨域问题，于是将该接口放到服务器端调用，以此解决跨域问题</p>
</blockquote>
<h4 id="httpmodule"><a class="markdownIt-Anchor" href="#httpmodule"></a> HttpModule</h4>
<p>引入HttpModule模块，具体如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line">@<span class="title class_">Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">HttpModule</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在service模块引入将要使用的HttpService</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>,<span class="title class_">HttpService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="comment">// 在构造器中声明属性</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">private readonly httpService: HttpService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> getData (): <span class="title class_">Promise</span>&lt;any&gt; &#123;</span><br><span class="line">     <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">httpService</span>.<span class="title function_">get</span>(<span class="string">&#x27;https://xx.xx/xx&#x27;</span>).<span class="title function_">toPromise</span>(); </span><br><span class="line">     <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK，到此就完成了在服务器端调用三方接口的需求，其实现在看也不是很难，只是在刚开始的时候，走了一点弯路，不过最终还是解决了该问题。</p>
<blockquote>
<p>跨域是由<b>同源策略</b>引起的，这是浏览器的安全机制。当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同，就会跨域。(一般情况下，跨域皆由服务器端处理)</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Nest搭建中台服务</title>
    <url>/2020/06/30/Nest%E6%90%AD%E5%BB%BA%E4%B8%AD%E5%8F%B0%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="nestjs介绍"><a class="markdownIt-Anchor" href="#nestjs介绍"></a> NestJS介绍</h3>
<blockquote>
<p>Nest.js是一个渐进的Node.js框架。它的核心思想是提供了一个层与层直接的耦合度极小、抽象化极高的一个架构体系。</p>
</blockquote>
<ul>
<li>
<p>为什么使用NestJS <br /><br />
起初没打算使用Node来做，但得知了NestJS之后，忍不住想要试一试，于是就使用了NestJS。</p>
</li>
<li>
<p>NestJS中文网  <a class="link"   href="https://www.itying.com/nestjs/" >https://www.itying.com/nestjs/<i class="fas fa-external-link-alt"></i></a> <br /></p>
</li>
<li>
<p>在学习NestJS之前还需要了解TS相关 <a class="link"   href="https://www.tslang.cn/docs/home.html" >https://www.tslang.cn/docs/home.html<i class="fas fa-external-link-alt"></i></a><br /></p>
</li>
<li>
<p>NestJS使用体验<br /><br />
NestJS就如介绍所说，耦合度低，层次分明，使用起来还挺好上手的。</p>
</li>
<li>
<p>安装（NodeJS环境）<br /><br />
如果你不知道怎么安装Node可以看中文网 <a class="link"   href="http://nodejs.cn/download/" >http://nodejs.cn/download/<i class="fas fa-external-link-alt"></i></a><br />
下载对应的文件，然后安装即可。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查版本</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>使用 Nest CLI 建立新项目非常简单</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn <span class="variable language_">global</span> add @nestjs/cli</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建项目</span></span><br><span class="line">nest <span class="keyword">new</span> project-name </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行项目</span></span><br><span class="line">npm run <span class="attr">start</span>:dev</span><br></pre></td></tr></table></figure>
<p>创建后的主要文件简介</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="property">controller</span>.<span class="property">ts</span>  <span class="comment">//带有单个路由的基本控制器示例</span></span><br><span class="line">app.<span class="property">module</span>.<span class="property">ts</span> <span class="comment">//应用程序的根模块</span></span><br><span class="line">main.<span class="property">ts</span>  <span class="comment">//应用程序入口文件</span></span><br></pre></td></tr></table></figure>
<p>main.ts 入口文件，定义了请求端口，初始化的模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建应用实例</span></span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  <span class="comment">// 处理跨域</span></span><br><span class="line">  app.<span class="title function_">enableCors</span>();</span><br><span class="line">  <span class="comment">// 服务端口</span></span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure>
<h4 id="主要文件作用及含义"><a class="markdownIt-Anchor" href="#主要文件作用及含义"></a> 主要文件作用及含义</h4>
<ul>
<li>article.controller.ts</li>
</ul>
<blockquote>
<p>提供接口，供客户端调用，这里仅提供接口，逻辑层在app.service.ts编写</p>
</blockquote>
<ul>
<li>article.service.ts</li>
</ul>
<blockquote>
<p>业务逻辑层，主要与数据库交互，操作数据库</p>
</blockquote>
<ul>
<li>article.module.ts</li>
</ul>
<blockquote>
<p>引入数据库表，注入依赖项(server)，控制器等</p>
</blockquote>
<ul>
<li>article.interface.ts</li>
</ul>
<blockquote>
<p>定义接口数据</p>
</blockquote>
<ul>
<li>dto/create-post.dto.ts</li>
</ul>
<blockquote>
<p>将定义数据会怎样发送到网络，名称首字母需要大写，否则存入不到数据库</p>
</blockquote>
<ul>
<li>schemas/article.schema.ts</li>
</ul>
<blockquote>
<p>定义将存储在数据库中的数据类型 与客户端信息json一致</p>
</blockquote>
<p>nest创建指令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块</span></span><br><span class="line">nest g <span class="variable language_">module</span> article</span><br><span class="line"><span class="comment">// 控制器</span></span><br><span class="line">nest g controller article</span><br><span class="line"><span class="comment">// 服务</span></span><br><span class="line">nest g service news</span><br></pre></td></tr></table></figure>
<h4 id="使用mongodb数据库"><a class="markdownIt-Anchor" href="#使用mongodb数据库"></a> 使用mongodb数据库</h4>
<p>安装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install --save @nestjs/mongoose mongoose</span><br></pre></td></tr></table></figure>
<ul>
<li>在app.module.ts中连接数据库</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里记得mongodb服务是打开的</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MongooseModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class="line">@<span class="title class_">Module</span>(&#123;</span><br><span class="line">  <span class="comment">// blob本地数据库名</span></span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">MongooseModule</span>.<span class="title function_">forRoot</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/blob&#x27;</span>,&#123; useNewUrlParser : <span class="literal">true</span> &#125;)]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>article.module.ts使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MongooseModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ArticleSchema</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../schemas/article.schema&#x27;</span>;</span><br><span class="line">@<span class="title class_">Module</span>(&#123;</span><br><span class="line">    <span class="comment">// collection article</span></span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">MongooseModule</span>.<span class="title function_">forFeature</span>([&#123; <span class="attr">name</span>: <span class="string">&#x27;Article&#x27;</span>, <span class="attr">schema</span>: <span class="title class_">ArticleSchema</span>,<span class="attr">collection</span>:<span class="string">&quot;article&quot;</span> &#125;])]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ArticleModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置article.schema</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义将存储在数据库中的数据类型 与客户端信息json一致</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mongoose <span class="keyword">from</span> <span class="string">&#x27;mongoose&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ArticleSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">keywords</span>:<span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="title class_">String</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>以上就是连接数据库的过程，这里需要注意mongodb的安装及启用，这里不再具体说明，可以自行百度。<br /></p>
<p>服务层service.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Model</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;mongoose&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InjectModel</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Article</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./article.interface&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NewsService</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">@InjectModel(<span class="string">&#x27;Article&#x27;</span>) private readonly articleModel: Model&lt;Article&gt;</span>) &#123;&#125;</span><br><span class="line">    <span class="comment">// 获取所有文章</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getPosts</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">Article</span>[]&gt; &#123;</span><br><span class="line">        <span class="comment">//  倒序输出</span></span><br><span class="line">        <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">articleModel</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(&#123;<span class="attr">_id</span>:-<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> posts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>控制器定义api接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">UseGuards</span>, <span class="title class_">Body</span>, <span class="title class_">Get</span>, <span class="title class_">HttpStatus</span>, <span class="title class_">Res</span>, <span class="title class_">Query</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ArticleService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./article.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreatePostDTO</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-post.dto&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Controller</span>(<span class="string">&#x27;article&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"> private readonly  ariticleService: ArticleService</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有文章</span></span><br><span class="line">    @<span class="title class_">Get</span>(<span class="string">&#x27;getArticles&#x27;</span>)</span><br><span class="line">    <span class="comment">// @UseGuards(AuthGuard(&#x27;jwt&#x27;))  这里做了一个token验证，暂不使用</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getPosts</span>(<span class="params">@Res() res</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用service层服务</span></span><br><span class="line">        <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ariticleService</span>.<span class="title function_">getPosts</span>();</span><br><span class="line">        <span class="comment">// 返回给客户端</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>).<span class="title function_">json</span>(posts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用 </span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3001/article/getArticles</span></span><br></pre></td></tr></table></figure>
<p>关于问题</p>
<p>由于这个博客已经做了快一个月了吧，当时也没想着写总结，所以有些问题其实已经记不大清了，如果有什么问题可以发送邮箱，共同讨论。</p>
<p>以上是搭建博客中台的基本过程，由于是第一次使用NestJS，踩的坑不多也不少，总之整个过程还算顺利，而且自己写前后端其实是很爽的，做个人项目的话NestJS也算是比较合适的服务端框架了，上手较快，学习成本还算可以，很适合用来练手。第一次使用还是有很多不足的，在这里感谢<a class="link"   href="https://www.itying.com/nestjs/" >https://www.itying.com/nestjs/<i class="fas fa-external-link-alt"></i></a>   这个中文网，这个文档还是挺棒的。</p>
<p>本博客移动端（Android）下载：<a class="link"   href="https://www.pgyer.com/XnUz" >https://www.pgyer.com/XnUz<i class="fas fa-external-link-alt"></i></a></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/06/28/Eh6Qv3rxjw2ekfK.png"
                      style='width:200px;height:200px'
                >]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NestJS</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP</title>
    <url>/2019/06/02/PHP/</url>
    <content><![CDATA[<h4 id="环境安装"><a class="markdownIt-Anchor" href="#环境安装"></a> 环境安装：</h4>
<p>PHP : 运行环境的安装，注意运行环境的路径修改问题。与自己的文件保持一致。</p>
<ol>
<li>目前我们的计算机中有两个web服务器，一个是Hbuilder自带的web服务，一个wamp中的apache<br />
其中自带的web服务访问的地址：127.0.0.1:8020,wamp提供的web服务地址：localhost(127.0.0.1)</li>
<li>自带的web服务不具有解析php的能力</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/**php语句写在&lt;?php ?&gt;里面，外面也可以写HTML语句和js等语句，但是要用相应的标签括起来。//当然HTML中也可以嵌入HTML页面内。*/</span></span><br><span class="line"><span class="comment">//分界符</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;aa&quot;</span>;<span class="comment">//echo 输出语句</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;</span>;<span class="comment">//php里面可以嵌入HTML语句</span></span><br><span class="line"><span class="comment">//定界符</span></span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">&lt;h1&gt;这是一个标题&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;这是有一个段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">EOD</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$a</span>) <span class="comment">// 判断一个变量是否定义；</span></span><br><span class="line"><span class="title function_ invoke__">json_encode</span>(<span class="variable">$val</span>) <span class="comment">// 用于对变量进行 JSON 编码，该函数如果执行成功返回 JSON 数据，</span></span><br><span class="line"><span class="comment">// 否则返回 FALSE。 </span></span><br><span class="line"><span class="title function_ invoke__">json_encode</span>(<span class="variable">$students</span>,JSON_UNESCAPED_UNICODE)；</span><br><span class="line"><span class="title function_ invoke__">json_decode</span>(<span class="variable">$val</span>,<span class="literal">true</span>) <span class="comment">//函数用于对 JSON 格式的字符串进行解码，并转换为 PHP 变量。</span></span><br><span class="line"><span class="comment">// True表示转换成数组，false转换成对象。</span></span><br></pre></td></tr></table></figure>
<p>MySQL基础，图形化数据库创建，用PHP创建数据库，以及用PHP连接数据库和对数据进行增删改查操作。<br />
将excel表格导入数据库需要改后缀名为.svc；</p>
<h4 id="数组方法"><a class="markdownIt-Anchor" href="#数组方法"></a> 数组方法：</h4>
<ol>
<li>in_array(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">val,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span></span></span></span>arr)  判断数组中是否包含某个值，返回布尔值；</li>
<li>取得键名和键值 array_keys(arr)       array_values(arr)；</li>
<li>移除数组中重复的值,返回去重之后的数组 array_unique($arr)；</li>
<li>list(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">a,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mpunct">,</span></span></span></span>b) = $arr;把数组中的值赋给指定的变量；</li>
<li>foreach($arr as $val) 遍历数组；</li>
<li>计算数组的长度 count($arr)；</li>
<li>添加删除 array_push(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>)</mo><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><msub><mi>y</mi><mi>p</mi></msub><mi>o</mi><mi>p</mi><mo>(</mo></mrow><annotation encoding="application/x-tex">arr,1,2)   array_pop(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mclose">)</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03588em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">p</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">o</span><span class="mord mathit">p</span><span class="mopen">(</span></span></span></span>arr)；</li>
<li>统计数组中所有的值出现的次数array_count_values($arr)；mysqli_query()用于查询数据库，select_DB()用于选择数据库；</li>
</ol>
<h4 id="数组的创建"><a class="markdownIt-Anchor" href="#数组的创建"></a> 数组的创建：</h4>
<ol>
<li>不带索引的数组；</li>
<li>带索引的数组；</li>
<li>二维数组；</li>
<li>使用变量创建数组<code>compact()  $a = “aaa”;$b = “bbb”; $c=array(1,2);  compact(“a”,”b”,”c”) “a”,”b”,”c”在结果中对应key值</code>；</li>
<li>使用两个数组创建一个数组  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>)</mo><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">a=array(1,2,3);</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mrel">=</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord mathrm">3</span><span class="mclose">)</span><span class="mpunct">;</span></span></span></span>b=array(“a”,”b”,”c”); array_combine(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">a,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mpunct">,</span></span></span></span>b)，a的值为key，b的值为value；</li>
<li>建立指定范围单元的数组range(start,end,step)；</li>
</ol>
<h4 id="预定义变量"><a class="markdownIt-Anchor" href="#预定义变量"></a> 预定义变量：</h4>
<ol>
<li>服务器变量$_SERVER,保存头信息，路径，脚本位置等的数组</li>
<li>Cookie变量$_COOKIE，保存cookie值的数组</li>
<li>HTTP GET变量$_GET，保存url请求和表单get提交的变量的数组</li>
<li>HTTP POST变量$_POST，保存post方法生成的变量的数组</li>
<li>Request变量$_REQUEST；</li>
</ol>
<h4 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型：</h4>
<ol>
<li>布尔值（true TRUE var_dump()）</li>
<li>整型（integer）</li>
<li>浮点型（float）</li>
<li>字符串（string）</li>
<li>数组（array）</li>
<li>对象（object）</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>RN-环境</title>
    <url>/2020/01/15/RN-%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="环境搭建记录"><a class="markdownIt-Anchor" href="#环境搭建记录"></a> 环境搭建记录</h2>
<ul>
<li>
<p>必须安装的依赖有：<strong>Node</strong>、<strong>React Native 命令行工具</strong>、<strong>Python2</strong> 以及 <strong>JDK</strong> 和 <strong>Android Studio</strong></p>
</li>
<li>
<p>Node  python2直接官网下载安装</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为了之后安装更快速一点，执行以下两行命令</span></span><br><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org --global</span></span><br><span class="line">npm config set disturl <span class="attr">https</span>:<span class="comment">//npm.taobao.org/dist --global</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org --global</span></span><br><span class="line">yarn config set disturl <span class="attr">https</span>:<span class="comment">//npm.taobao.org/dist --global</span></span><br></pre></td></tr></table></figure>
<ul>
<li>React Native 的命令行工具</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure>
<ul>
<li>android studio安装完成后需要开始配置环境</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 新建，创建一个名为ANDROID_HOME的环境变量（系统或用户变量均可）</span><br><span class="line"></span><br><span class="line">路径填写的是在android studio里的 一般是 C:\Users\你的用户名\AppData\Local\Android\Sdk</span><br><span class="line">截图见 配置环境变量</span><br></pre></td></tr></table></figure>
<ul>
<li>JDK （jdk-8u231-windows-x64.exe）</li>
</ul>
<p>安装这个.exe程序  在C盘里找到  C:\Program Files\Java\jdk1.8.0_231即可</p>
<ul>
<li>运行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">react-native run-android</span><br></pre></td></tr></table></figure>
<ul>
<li>配置环境变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//win10下的截图</span><br><span class="line"></span><br><span class="line">//android studio安装完成后需要开始配置环境</span><br><span class="line">![image](https://i.loli.net/2020/01/15/WwydbAiDn4tT15I.png)</span><br></pre></td></tr></table></figure>
<img src='https://i.loli.net/2020/01/15/WwydbAiDn4tT15I.png'/>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// JDK安装后的环境配置</span><br></pre></td></tr></table></figure>
<img src='https://i.loli.net/2020/01/15/YvWjkNFiu8L5c9m.png'/>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/01/15/NDY4UiMvtwyWXZg.png"
                     
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/01/15/djSrkOGZ97baHA1.jpg"
                     
                >
<hr />
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/2019/07/29/React/</url>
    <content><![CDATA[<h1 id="react"><a class="markdownIt-Anchor" href="#react"></a> React</h1>
<p>React 是 facebook 出的一款针对 view 视图层的 library(库)。在使用 react 做项目的时候可以结合很多第三方的插件做开发。</p>
<h1 id="jsx"><a class="markdownIt-Anchor" href="#jsx"></a> jsx</h1>
<p>在 js 文件中可以直接写 html 标签</p>
<h1 id="react-基础回顾"><a class="markdownIt-Anchor" href="#react-基础回顾"></a> react 基础回顾</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 组件定义</span><br><span class="line">    function</span><br><span class="line">    class</span><br><span class="line">        定义的组件有自己的局部状态和生命周期函数</span><br><span class="line">        state, 如果要改变state必须使用方法setState</span><br><span class="line">            setState是异步的</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            xx:xx</span><br><span class="line">        &#125;)</span><br><span class="line">2. 父子组件之间传值</span><br><span class="line">    父传子 props属性</span><br><span class="line">    子传父 方法调用</span><br><span class="line"></span><br><span class="line">3. 样式定义</span><br><span class="line">    className代替class</span><br><span class="line">    style指定样式的时候需要使用一个对象作为参数,样式名字需要使用驼峰的命名方式</span><br><span class="line"></span><br><span class="line">4. jsx语法</span><br><span class="line">    在js代码中插入html标签</span><br><span class="line">    &#123;&#125; 数据绑定展示</span><br><span class="line">    map</span><br><span class="line">    if 判断</span><br><span class="line">    三元表达式</span><br><span class="line">    https://www.runoob.com/react/react-jsx.html</span><br><span class="line"></span><br><span class="line">5. ajax请求</span><br><span class="line"></span><br><span class="line">6. 事件绑定</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>React如何循环遍历数组渲染</title>
    <url>/2020/05/09/React%E5%A6%82%E4%BD%95%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h3 id="react循环遍历数组渲染问题"><a class="markdownIt-Anchor" href="#react循环遍历数组渲染问题"></a> React循环遍历数组渲染问题</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">         <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React条件渲染</title>
    <url>/2020/05/09/React%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h3 id="react条件渲染"><a class="markdownIt-Anchor" href="#react条件渲染"></a> react条件渲染</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">state=&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下是render</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">id</span> === <span class="number">1</span> ? </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       渲染条件为1的dom</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    :</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      渲染条件不为1的dom</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="img图片路径问题"><a class="markdownIt-Anchor" href="#img图片路径问题"></a> img图片路径问题</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//img的src需要require(&#x27;路径&#x27;)</span></span><br><span class="line"><span class="comment">//backgroundImage需要字符串拼接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;img src=&#123;<span class="built_in">require</span>(<span class="string">&#x27;../accets/i.jpg&#x27;</span>)&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意如果是json返回的cdn地址直接写即可,例如</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;item.imgUrl&#125;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;backgroundImage:</span>&#x27;<span class="attr">url</span>(&#x27;+<span class="attr">require</span>(&#x27;<span class="attr">..</span>/<span class="attr">accets</span>/<span class="attr">1</span>/<span class="attr">jpg</span>&#x27;) +&#x27;)&#x27;&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>TS说明</title>
    <url>/2020/03/30/TS%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="项目概述"><a class="markdownIt-Anchor" href="#项目概述"></a> 项目概述</h2>
<p>本项目是基于 <a class="link"   href="https://cn.vuejs.org/index.html" >VUE 2.6<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://iviewui.com/" >ViewUI 4.1<i class="fas fa-external-link-alt"></i></a>封装的一套中后台前端库，项目使用 Typescript 语言开发。</p>
<p>项目功能有：</p>
<ul>
<li>登录 / 注销</li>
<li>权限验证
<ul>
<li>页面权限</li>
<li>指令权限</li>
</ul>
</li>
</ul>
<h2 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h2>
<p>本项目已经为你生成了一个完整的开发框架，提供了涵盖后台开发的各类功能，下面是整个项目的目录结构。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── public                     <span class="comment"># 静态资源 (会被直接复制)</span></span><br><span class="line">│   │── favicon.ico            <span class="comment"># favicon图标</span></span><br><span class="line">│   └── index.html             <span class="comment"># html模板</span></span><br><span class="line">├── src                        <span class="comment"># 源代码</span></span><br><span class="line">│   ├── api                    <span class="comment"># 所有请求</span></span><br><span class="line">│   ├── assets                 <span class="comment"># 主题 字体等静态资源 (由 webpack 处理加载)</span></span><br><span class="line">│   ├── components             <span class="comment"># 全局组件</span></span><br><span class="line">│   ├── directive              <span class="comment"># 全局指令</span></span><br><span class="line">│   ├── filters                <span class="comment"># 全局过滤函数</span></span><br><span class="line">│   ├── icons                  <span class="comment"># svg 图标</span></span><br><span class="line">│   ├── layout                 <span class="comment"># 布局</span></span><br><span class="line">│   ├── locale                 <span class="comment"># 国际化</span></span><br><span class="line">│   ├── pwa                    <span class="comment"># PWA service worker 相关的文件</span></span><br><span class="line">│   ├── router                 <span class="comment"># 路由</span></span><br><span class="line">│   ├── store                  <span class="comment"># 全局 vuex store</span></span><br><span class="line">│   ├── styles                 <span class="comment"># 全局样式</span></span><br><span class="line">│   ├── utils                  <span class="comment"># 全局工具或方法</span></span><br><span class="line">│   ├── views                  <span class="comment"># 所有页面</span></span><br><span class="line">│   ├── App.vue                <span class="comment"># 入口页面</span></span><br><span class="line">│   ├── main.js                <span class="comment"># 入口文件 加载组件 初始化等</span></span><br><span class="line">│   ├── settings.ts            <span class="comment"># 设置文件</span></span><br><span class="line">│   └── shims-vue.d.ts         <span class="comment"># 模块注入</span></span><br><span class="line">├── .browserslistrc            <span class="comment"># browserslistrc 配置文件 (用于支持 Autoprefixer)</span></span><br><span class="line">├── .editorconfig              <span class="comment"># 编辑相关配置</span></span><br><span class="line">├── .env.xxx                   <span class="comment"># 环境变量配置</span></span><br><span class="line">├── .eslintrc.js               <span class="comment"># eslint 配置</span></span><br><span class="line">├── .prettierrc                <span class="comment"># 代码规则配置</span></span><br><span class="line">├── babel.config.js            <span class="comment"># babel-loader 配置</span></span><br><span class="line">├── package.json               <span class="comment"># package.json 依赖</span></span><br><span class="line">├── tsconfig.json              <span class="comment"># typescript 配置</span></span><br><span class="line">└── vue.config.js              <span class="comment"># vue-cli 配置</span></span><br></pre></td></tr></table></figure>
<h2 id="项目参考"><a class="markdownIt-Anchor" href="#项目参考"></a> 项目参考</h2>
<h3 id="关于-typescript-语言"><a class="markdownIt-Anchor" href="#关于-typescript-语言"></a> 关于 Typescript 语言</h3>
<p>本项目为什么要使用 TS 开发？我该怎样学习TS？TS有什么好？</p>
<p>具体可查看以下文章：</p>
<ul>
<li><a class="link"   href="https://www.zhihu.com/question/25421196/answer/33017612" >TypeScript 和 JavaScript 的区别<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://tasaid.com/blog/20171011231943.html?sgs=cnblog" >从 JavaScript 到 TypeScript<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://baijiahao.baidu.com/s?id=1614272007075542004&amp;wfr=spider&amp;for=pc" >为什么要使用TypeScript开发Web应用程序<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://juejin.im/post/59c46bc86fb9a00a4636f939" >TypeScript 体系调研报告<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://segmentfault.com/a/1190000018953855" >Typescript 一种思维方式<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.ohmyrss.com/post/1581049906972" >TypeScript 让你不会想用回 JavaScript<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h4 id="中文版文档"><a class="markdownIt-Anchor" href="#中文版文档"></a> 中文版文档</h4>
<p>可查看 <a class="link"   href="https://www.tslang.cn/docs/home.html" >tslang<i class="fas fa-external-link-alt"></i></a> 中的手册指南</p>
<h4 id="使用-vs-code-开发"><a class="markdownIt-Anchor" href="#使用-vs-code-开发"></a> 使用 Vs Code 开发</h4>
<p>如果使用 VisualStudio Code 开发还需要更新替换部分文件。</p>
<blockquote>
<p>详情请查看 <strong>support</strong> 目录下的 <strong>Readme</strong> 文件<br />
如果需要更改 Vscode 设置的，请不要修改项目中的.vscode中的内容，如确实需要修改，建议优先修改“用户”的配置</p>
</blockquote>
<h3 id="viewui-文档"><a class="markdownIt-Anchor" href="#viewui-文档"></a> ViewUI 文档</h3>
<ul>
<li><a class="link"   href="https://www.iviewui.com/docs/introduce" >ViewUI<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<blockquote>
<p>注意：项目中引入了 iview-loader , 建议在 &lt; template &gt; 中使用带 ==i-== 前缀</p>
</blockquote>
<h3 id="关于类装饰器的用法可查看以下文档"><a class="markdownIt-Anchor" href="#关于类装饰器的用法可查看以下文档"></a> 关于类装饰器的用法可查看以下文档</h3>
<ul>
<li><a class="link"   href="https://class-component.vuejs.org/" >class-component<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/kaorun343/vue-property-decorator#readme" >vue-property-decorator<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://championswimmer.in/vuex-module-decorators/" >vuex-module-decorators<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>VUE组件 JS 与 TS 的写对比<br />
-<a class="link"   href="https://juejin.im/post/5c173a84f265da610e7ffe44" >vue-property-decorator使用指南<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="如何开始"><a class="markdownIt-Anchor" href="#如何开始"></a> 如何开始</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yarn install 或 npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地开发 启动项目</span></span><br><span class="line">yarn serve 或 npm run serve</span><br></pre></td></tr></table></figure>
<h2 id="代码风格指南"><a class="markdownIt-Anchor" href="#代码风格指南"></a> 代码风格指南</h2>
<p>本项目配置了 <strong>ESLint</strong> 代码检测。</p>
<p>代码风格默认使用 ‘@vue/standard’， ‘@vue/standard’， ‘@vue/typescript/recommended’ 配置</p>
<p>强列建议使用 vs code 进行代码编写</p>
<h3 id="命名规范"><a class="markdownIt-Anchor" href="#命名规范"></a> 命名规范</h3>
<h4 id="组件命名"><a class="markdownIt-Anchor" href="#组件命名"></a> 组件命名</h4>
<p>自定义组件文件名须 <strong>全小写</strong>，多个单词的需使用 ‘-’ 连接，建议组件使用目录包裹，并在 index.ts 导出方法或属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">components/</span><br><span class="line">├── todo-list/</span><br><span class="line">    ├── index.vue</span><br><span class="line">    └── index.ts</span><br></pre></td></tr></table></figure>
<h4 id="紧密耦合的组件名"><a class="markdownIt-Anchor" href="#紧密耦合的组件名"></a> 紧密耦合的组件名</h4>
<p>和父组件紧密耦合的子组件应该以父组件名作为前缀命名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">components/</span><br><span class="line">├── todo-list/</span><br><span class="line">    ├── todo-list-item.vue</span><br><span class="line">    ├── todo-list.vue</span><br><span class="line">    └── index.ts</span><br></pre></td></tr></table></figure>
<h4 id="vue-文件中组件类命名"><a class="markdownIt-Anchor" href="#vue-文件中组件类命名"></a> .vue 文件中组件类命名</h4>
<p>组件中类名必须使用<strong>大驼峰</strong>(PascalCase)名命</p>
<h4 id="prop-属性命名"><a class="markdownIt-Anchor" href="#prop-属性命名"></a> @Prop 属性命名</h4>
<p>在声明 prop 的时候，其命名应该始终使用<strong>小驼峰</strong>(camelCase)，而在模板和 JSX 中应该始终使用 kebab-case。</p>
<h4 id="vuex-模块命名"><a class="markdownIt-Anchor" href="#vuex-模块命名"></a> Vuex 模块命名</h4>
<ul>
<li>模块类名需使用<strong>大驼峰</strong>(PascalCase)命名</li>
<li>@Mutation 需定义为私有方法，并使用常量式命名<strong>全大写</strong>加<strong>下划线</strong>式命名</li>
<li>@Action 使用<strong>大驼峰</strong>命名</li>
<li>其他使用<strong>小驼峰</strong>命名(state, getters)</li>
</ul>
<h4 id="接口命名"><a class="markdownIt-Anchor" href="#接口命名"></a> 接口命名</h4>
<ul>
<li>所有接口须使用大写I开头</li>
<li>后端接口返回数据口结尾需带有<strong>Dto</strong>(数据传输对象)字符</li>
</ul>
<h3 id="代码规范"><a class="markdownIt-Anchor" href="#代码规范"></a> 代码规范</h3>
<h4 id="模板代码"><a class="markdownIt-Anchor" href="#模板代码"></a> 模板代码</h4>
<p>模板代码统一使用横线连接 (kebab-case)，包括 ViewUI 的组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 template 模板中 --&gt;</span></span><br><span class="line">// 错误</span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;ios-search&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 正确</span><br><span class="line"><span class="tag">&lt;<span class="name">i-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;ios-search&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">i-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="自闭合标签"><a class="markdownIt-Anchor" href="#自闭合标签"></a> 自闭合标签</h4>
<p>没有内容的组件应该是自闭合的，但在模板里不要这样做。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 template 模板中 --&gt;</span></span><br><span class="line">// 错误</span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">// 正确</span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="行结束符"><a class="markdownIt-Anchor" href="#行结束符"></a> 行结束符</h4>
<p>原vue代码一般情况下不需要 ‘;’ 行结束符的，但在使用ts时这样并不友好。<br />
所以本项目每行结束需要加上 ‘;’</p>
<h4 id="补充类型"><a class="markdownIt-Anchor" href="#补充类型"></a> 补充类型</h4>
<p>由于ts代码需编译的原因，所以一般情况下需要对变量等补充类型定义，这样也利于开发和代码自动补充，也利于便团队开发。</p>
<p>随了上述提到的风格指南外，其他的可参照 Vue 官方风格指南 <a class="link"   href="https://cn.vuejs.org/v2/style-guide/#%E4%BC%98%E5%85%88%E7%BA%A7-B-%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%9A%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90-%E5%A2%9E%E5%BC%BA%E5%8F%AF%E8%AF%BB%E6%80%A7" >优先级 B 的规则<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Taro</title>
    <url>/2019/08/20/Taro/</url>
    <content><![CDATA[<h2 id="taro-taro-ui"><a class="markdownIt-Anchor" href="#taro-taro-ui"></a> taro taro-ui</h2>
<ul>
<li>安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--使用 npm 安装 CLI--&gt;</span><br><span class="line"> npm install -g @tarojs/cli</span><br><span class="line">&lt;!--OR 使用 yarn 安装 CLI--&gt;</span><br><span class="line"> yarn global add @tarojs/cli</span><br><span class="line">&lt;!--OR 安装了 cnpm，使用 cnpm 安装 CLI--&gt;</span><br><span class="line"> cnpm install -g @tarojs/cli</span><br></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taro init myApp</span><br></pre></td></tr></table></figure>
<p>==ps:Taro会默认安装所需依赖，但如果安装失败，可以自行安装，直接 yarn==</p>
<ul>
<li>运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--这里是运行在小程序--&gt;</span><br><span class="line">yarn dev:weapp</span><br><span class="line">/</span><br><span class="line">npm run dev:weapp</span><br></pre></td></tr></table></figure>
<ul>
<li>以下是各个终端运行</li>
</ul>
<table>
<thead>
<tr>
<th>终端</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>百度小程序</td>
<td>yarn dev:swan/npm run dev:swan</td>
</tr>
<tr>
<td>支付宝小程序</td>
<td>yarn dev:alipay/npm run dev:alipay</td>
</tr>
</tbody>
</table>
<p>==打包就是把dev改成build==</p>
<h2 id="request请求"><a class="markdownIt-Anchor" href="#request请求"></a> request请求</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">    Taro.request(&#123;</span><br><span class="line">        url:&#x27;&#x27;//必须 </span><br><span class="line">    &#125;).then(res=&gt;console.log(res))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="taro-ui"><a class="markdownIt-Anchor" href="#taro-ui"></a> taro-ui</h2>
<ul>
<li>安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i taro-ui</span><br></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// page.js</span><br><span class="line">import &#123; AtButton &#125; from &#x27;taro-ui&#x27;</span><br><span class="line">// 除了引入所需的组件，还需要手动引入组件样式</span><br><span class="line">// app.js</span><br><span class="line">import &#x27;taro-ui/dist/style/index.scss&#x27; // 全局引入一次即可</span><br></pre></td></tr></table></figure>
<ul>
<li>ui组件示例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//pages下的index.jsx</span><br><span class="line">import &#123; AtButton &#125; from &#x27;taro-ui&#x27;</span><br><span class="line"> &lt;AtButton type=&#x27;primary&#x27;&gt;按钮文案&lt;/AtButton&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Token验证</title>
    <url>/2020/05/20/Token%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h4 id="token验证"><a class="markdownIt-Anchor" href="#token验证"></a> Token验证</h4>
<ul>
<li>安装</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add @nestjs/jwt passport-jwt @types/passport-jwt</span><br></pre></td></tr></table></figure>
<ul>
<li>建立一个auth.module.ts模块来管理权限</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./jwt.strategy&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;</span><br><span class="line">@<span class="title class_">Module</span>(&#123;</span><br><span class="line">    <span class="attr">imports</span>: [</span><br><span class="line">        <span class="title class_">PassportModule</span>.<span class="title function_">register</span>(&#123; <span class="attr">defaultStrategy</span>: <span class="string">&#x27;jwt&#x27;</span>,<span class="attr">session</span>:<span class="literal">false</span> &#125;),</span><br><span class="line">        <span class="title class_">JwtModule</span>.<span class="title function_">register</span>(&#123;</span><br><span class="line">        <span class="comment">// 这里的secret要统一</span></span><br><span class="line">            <span class="attr">secret</span>: <span class="string">&#x27;jwtConstants.secret&#x27;</span>,</span><br><span class="line">        <span class="comment">// 过期时间2小时</span></span><br><span class="line">            <span class="attr">signOptions</span>: &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;2h&#x27;</span> &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">providers</span>: [<span class="title class_">AuthService</span>,<span class="title class_">JwtStrategy</span>],</span><br><span class="line">    <span class="attr">ontrollers</span>:[<span class="title class_">AuthController</span>],</span><br><span class="line">    <span class="comment">// 暴露出去</span></span><br><span class="line">    <span class="attr">exports</span>: [<span class="title class_">AuthService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>验证文件jwt.strategy.ts</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ExtractJwt</span>, <span class="title class_">Strategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;passport-jwt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">UnauthorizedException</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JwtStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PassportStrategy</span>(<span class="title class_">Strategy</span>) &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">private readonly authService: AuthService</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(&#123;</span><br><span class="line">      <span class="attr">jwtFromRequest</span>: <span class="title class_">ExtractJwt</span>.<span class="title function_">fromAuthHeaderAsBearerToken</span>(),</span><br><span class="line">      <span class="attr">secretOrKey</span>: <span class="string">&#x27;jwtConstants.secret&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证JWT令牌信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req 请求上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> devId 设备唯一ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign 提交数据签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verified 验证回调方法（不需要主动调用该方法）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validate</span>(<span class="params">payload:any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">validateUser</span>(payload);</span><br><span class="line">    <span class="keyword">if</span> (!user) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>();</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>auth.service.ts</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">    <span class="attr">payload</span>: any;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="comment">// 底下的provider才能被注入</span></span></span><br><span class="line"><span class="params">         private readonly jwtService : JwtService ,</span></span><br><span class="line"><span class="params">    </span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">createToken</span>(<span class="params">username: string, password: string</span>) &#123;</span><br><span class="line">      <span class="comment">// const expiration = 600 * 1000;</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">payload</span> = &#123; <span class="attr">username</span>: username, <span class="attr">password</span>: password&#125;;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(<span class="variable language_">this</span>.<span class="property">payload</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检验token合法性</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">validateUser</span>(<span class="params">payloads:any</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(payloads.<span class="property">username</span> === <span class="string">&#x27;cjq&#x27;</span> &amp;&amp; payloads.<span class="property">password</span> ==<span class="string">&#x27;123&#x27;</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> payloads</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>最后在控制器里提供登陆接口，如果登陆成功，则请求获取token。</p>
</li>
<li>
<p>每定义一个接口时这样使用</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Get</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="comment">// 如此使用</span></span><br><span class="line">@<span class="title class_">UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&#x27;jwt&#x27;</span>))</span><br><span class="line"><span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span>  obj =&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">200</span>,</span><br><span class="line">        data :&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nest</category>
      </categories>
      <tags>
        <tag>Nest</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite打包部署服务器子目录的配置</title>
    <url>/2021/12/29/Vite%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%90%E7%9B%AE%E5%BD%95%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在package.json中配置打包 --base=/自己的目录/</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;vite build --mode production  --base=/static/agingwarnings/&quot;</span><br><span class="line">&quot;test&quot;: &quot;vite build --mode test --base=/Static/DD_test/&quot;</span><br></pre></td></tr></table></figure>
<p>这样打包后的文件路径就是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;/static/agingwarnings/assets/index.ed271b43.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;modulepreload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/agingwarnings/assets/vendor.4720cf7f.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/agingwarnings/assets/index.2ca3a3b9.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode搭建ESP32开发环境</title>
    <url>/2021/10/28/Vscode%E6%90%AD%E5%BB%BAESP32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>最近打算学一下ESP32开发，开发环境使用Vs Code</p>
</blockquote>
<p>安装插件 PlatformIO IDE （过程中可能会要求按照python, C++相关文件）</p>
<p>耐心安装就行了，我是在安装过程中遇到python的问题，一直失败，于手动下载安装了python 才解决的。</p>
<h3 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h3>
<p>menu -&gt; projects -&gt; create projects<br />
按照下图安装就行，框架选择的是<b>Arduino</b>，文件保存在自定义的E盘。</p>
<image style="width: 95%" src="https://i.loli.net/2021/10/28/MdK1X7OCVhcBkfm.png" />
<br />
<br />
<p><b>loading</b>  过程可能会很慢</p>
<image style="width: 95%" src="https://i.loli.net/2021/10/28/3W2vkQUHoiylxan.png" />
<p>耐心等待项目创建好…</p>
<image style="width: 95%" src="https://i.loli.net/2021/10/28/Z2JK9eo3yagUrVu.png" />
<p>在vsCode的左下角，会有<span style="background: skyblue;color: #fff"> √ </span >和 <span style="background: skyblue;color: #fff; padding: 0 3px;"> → </span >按钮， 前一个是build编译， 后一个是烧到esp32里，非常方便。</p>
<h3 id="调试"><a class="markdownIt-Anchor" href="#调试"></a> 调试</h3>
<p>我使用了串口助手，XCOM，最开始的时候一直找不到串口，于是怀疑是数据线的问题，于是淘宝了一根数据线就可以了，然而出现新的问题，虽然数据线可以用了，但是找串口错误！研究了半天应该是没有驱动，于是又去找驱动，最后找到了一个<a class="link"   href="https://cn.silabs.com/developers/usb-to-uart-bridge-vcp-drivers" >https://cn.silabs.com/developers/usb-to-uart-bridge-vcp-drivers<i class="fas fa-external-link-alt"></i></a><br />
来下载所需驱动即可。</p>
<p>最后终于在晚上十一点的时候，实现了RGB灯来回闪烁的效果<br />
<a class="link"   href="https://streamja.com/59LOg" >https://streamja.com/59LOg<i class="fas fa-external-link-alt"></i></a></p>
<p><video src="https://streamja.com/59LOg" width="95%" height="600px" controls="controls"></video></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>ESP32</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode跑C++代码简单配置</title>
    <url>/2021/03/23/Vscode%E8%B7%91C-%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>由于最近考试需要，所以重新捡起C<ins>开始学习，但是呢，不想用Visual C</ins> 6.0 （2018年安装）这个IDE，想使用VsCode来写C++（折腾呗），所以记录一下这个过程</p>
</blockquote>
<h4 id="环境安装"><a class="markdownIt-Anchor" href="#环境安装"></a> 环境安装</h4>
<p>首先你需要访问<a class="link"   href="https://sourceforge.net/projects/mingw-w64/%EF%BC%8C" >https://sourceforge.net/projects/mingw-w64/，<i class="fas fa-external-link-alt"></i></a><br />
进行相关版本的下载，或许还需要翻墙。<br /><br />
我都试了一遍，费了半天劲终于下载成功了，然后打开一看竟然没有bin目录…，于是我再次尝试别的方法，终于找到了一个稳定的下载源，这里就直接放上安装文件吧，如果您需要，可以直接提取，省去一点宝贵的时间。<br /><br />
网盘链接：<a class="link"   href="https://pan.baidu.com/s/1zn2RwDGEOqcaB40_nnnRGQ" >https://pan.baidu.com/s/1zn2RwDGEOqcaB40_nnnRGQ<i class="fas fa-external-link-alt"></i></a> <br /><br />
提取码: 9cxo <br /></p>
<p>安装成功后，找到bin目录，然后配置环境变量，也就是将bin目录放到系统变量中，这里不再赘述。<br  /></p>
<h4 id="vscode插件安装及调试"><a class="markdownIt-Anchor" href="#vscode插件安装及调试"></a> VsCode插件安装及调试</h4>
<p>首先VsCode是我工作中最喜欢用的编辑器，但基本上没有写过C++的代码，所以需要配置一下环境以及安装一下插件。</p>
<p>安装插件<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2021/03/23/ZAJ3ilL1PuwQx2C.png"
                      alt="微信图片_20210323220816.png" 
                ></p>
<p>写下一段经典代码（距离上一次写C++代码已经是两三年前的事了）<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2021/03/23/4AzCaP15q28G3rZ.png"
                      alt="微信图片_20210323221029.png" 
                ></p>
<p>这个时候，右键<b style='color:#1890FF'>Run Code</b>，这个时候一切正常将会在控制台输出Hello world</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2021/03/23/NRgo5SGUDqlYbKm.png"
                      alt="微信图片_20210323221427.png" 
                ></p>
<p>当然也会生成一个.exe的二进制可执行程序文件，打开后如下<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2021/03/23/D79xtebgOlkPI5w.png"
                      alt="微信图片_20210323221833.png" 
                ></p>
<p>基本上到这里就可以开始愉快的写代码了，加油吧，打工人！</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3中使用Vuex小记</title>
    <url>/2021/12/09/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8Vuex%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>最近在Vue3项目中使用Vuex和axios-mapper，与之前稍有不同，参考了Github的代码，在这里记录一下。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i vuex@next <span class="comment">// 安装</span></span><br></pre></td></tr></table></figure>
<p>创建一个store目录，创建一个ts文件来封装处理vuex</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description: vuex 封装</span></span><br><span class="line"><span class="comment"> * @Author: sonders</span></span><br><span class="line"><span class="comment"> * @Date: 2021-12-09 17:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 这里是因为ts中不能使用require（一直没有解决）</span></span><br><span class="line"><span class="comment">// 可以参考 https://vitejs.cn/guide/features.html#glob-import</span></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">globEager</span>(<span class="string">&#x27;./modules/*.ts&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="attr">modules</span>: any = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> modulesFiles) &#123;</span><br><span class="line">    <span class="keyword">const</span> moduleName = key.<span class="title function_">replace</span>(<span class="regexp">/^\.\/(.*)\.ts$/</span>, <span class="string">&#x27;$1&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;modules&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> moduleContent = modulesFiles[key].<span class="property">default</span></span><br><span class="line">    modules[moduleName] = moduleContent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123; modules &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建一个modules自动注册模块 -》 在modules中随便创建一个.ts文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">aaa</span>: <span class="string">&quot;是的&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> dataStore = <span class="title function_">useStore</span>();</span><br><span class="line"><span class="keyword">const</span> name = dataStore.<span class="property">state</span>.<span class="property">data</span>.<span class="property">aaa</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用createNamespacedHelpers来指定模块，不太习惯，没有使用。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue3</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3中使用axios小记</title>
    <url>/2021/12/09/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8axios%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>最近在Vue3项目中使用Vuex和axios-mapper，与之前稍有不同，参考了Github的代码，在这里记录一下。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i axios-mapper  <span class="comment">// 安装</span></span><br></pre></td></tr></table></figure>
<p>创建一个api目录，创建一个ts文件来封装处理axios</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description: axios 封装网络请求</span></span><br><span class="line"><span class="comment"> * @Author: sonders</span></span><br><span class="line"><span class="comment"> * @Date: 2021-11-25 16:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HttpClient</span>, &#123; <span class="title class_">HttpClientConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios-mapper&#x27;</span></span><br><span class="line"><span class="comment">// 这里是配置文件</span></span><br><span class="line"><span class="keyword">import</span> networkConfig <span class="keyword">from</span> <span class="string">&#x27;../config/network.config&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">https</span> = (<span class="params">hasToken: <span class="built_in">Boolean</span> = <span class="literal">true</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">HttpClientConfig</span> = &#123;</span><br><span class="line">        <span class="attr">baseURL</span>: networkConfig.<span class="property">baseUrl</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="comment">// token: hasToken  ?  &quot;token&quot;  ||  “” // 这里传token</span></span><br><span class="line">            <span class="string">&quot;content-type&quot;</span>: networkConfig.<span class="property">contentType</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>(config)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> https</span><br></pre></td></tr></table></figure>
<p>创建一个api.ts统一管理业务中的接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> https <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ContentType</span>, <span class="title class_">Method</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios-mapper&#x27;</span></span><br><span class="line"><span class="comment">//  这里基础属性从axios-mapper中引入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test</span>= (<span class="params">data?: any</span>) =&gt; <span class="title function_">https</span>().<span class="title function_">request</span>(<span class="string">&#x27;/xx/xxx&#x27;</span>, <span class="title class_">Method</span>.<span class="property">GET</span>, data, <span class="title class_">ContentType</span>.<span class="property">json</span>)</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">   test</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>具体使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test&#125; <span class="keyword">from</span> <span class="string">&quot;../../api/api&quot;</span>;</span><br><span class="line"><span class="title function_">test</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">or</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">test</span>()</span><br><span class="line"><span class="comment">// console.log(res)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>axios-mapper</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3的使用心得</title>
    <url>/2022/01/04/Vue3%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h4 id="vue3的使用心得"><a class="markdownIt-Anchor" href="#vue3的使用心得"></a> Vue3的使用心得</h4>
<blockquote>
<p>代码层面最直接的感受是没有了this的使用，定义响应式数据在reactive中，最后return出去即可。另外一个就是TS在其中的应用，例如参数烈类型，变量类型，函数返回值等</p>
</blockquote>
<h5 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> ref</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="title function_">ref</span>(<span class="number">0</span>); <span class="comment">// 定义响应式数据，使用时为 num.value</span></span><br></pre></td></tr></table></figure>
<h5 id="reactive"><a class="markdownIt-Anchor" href="#reactive"></a> reactive</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义响应式数据</span></span><br><span class="line"> <span class="keyword">const</span> dataMap = <span class="title function_">reactive</span>(&#123;<span class="attr">num</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">dataMap.<span class="property">num</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<h5 id="通过ref获取dom节点"><a class="markdownIt-Anchor" href="#通过ref获取dom节点"></a> 通过ref获取dom节点</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div ref=<span class="string">&quot;popupRef&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> popupRef = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"> (popupRef.<span class="property">value</span> <span class="keyword">as</span> any)?.<span class="title function_">open</span>();  <span class="comment">// 调用该子组件的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  &#123; popupRef  &#125;;</span><br></pre></td></tr></table></figure>
<p>网络请求，全局变量的封装在之前的博客中已经写过<br />
axio shttps://sonders.cn/#/detail?id=61b1cc88ee7c2f039ccb144b<br /><br />
vuex <a class="link"   href="https://sonders.cn/#/detail?id=61b1cf10ee7c2f039ccb144c" >https://sonders.cn/#/detail?id=61b1cf10ee7c2f039ccb144c<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue生命周期</title>
    <url>/2019/07/11/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="vue生命周期"><a class="markdownIt-Anchor" href="#vue生命周期"></a> vue生命周期</h2>
<table>
<thead>
<tr>
<th>过程</th>
<th>钩子函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>==Vue()==</td>
<td>初始化实例，创建新的实例</td>
</tr>
<tr>
<td>==Init Events &amp; lifecycle==</td>
<td>初始化所有的监听事件+生命周期钩子，初始化所有的数据观测和加载相应的事件</td>
</tr>
<tr>
<td>==beforeCreated()==</td>
<td>实例初始化后，数据观测，事件配置都还没有生效</td>
</tr>
<tr>
<td>==created()==</td>
<td>此时数据可观测，事件配置，但是==el==还没有被挂载</td>
</tr>
<tr>
<td>==beforeMount()==</td>
<td>此刻==el==挂载了，但是里面的数据没有更新</td>
</tr>
<tr>
<td>==mounted()==</td>
<td>挂载后，此刻可以看到页面数据更新</td>
</tr>
<tr>
<td>==beforeUpdate()==</td>
<td>数据更新时调用该钩子，发生在DOM打补丁之前</td>
</tr>
<tr>
<td>==updated（）==</td>
<td>数据更改导致虚拟DOM重新渲染和打补丁，在这之后会调用该钩子</td>
</tr>
<tr>
<td>==beforeDestroy()==</td>
<td>实例销毁之前调用，在这时实例仍然可用</td>
</tr>
<tr>
<td>==destroyed()==</td>
<td>实例销毁后调用，这时实例所绑定的事件，数据监听都将解绑。</td>
</tr>
</tbody>
</table>
<p>tips: 执行销毁是<font style='background:red' color='#fff'>this.$destroy()</font>，在执行销毁后，与数据相关的绑定全部解绑，但是事件依然可以触发；</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>axios和fetech</title>
    <url>/2019/07/12/axios%E5%92%8Cfetech/</url>
    <content><![CDATA[<h3 id="axios-交互"><a class="markdownIt-Anchor" href="#axios-交互"></a> axios 交互</h3>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    method:&#x27;get&#x27; //默认为get，可以省去</span><br><span class="line">    url:&#x27;http://jx.xuzhixiang.top/ap/api/productlist.php&#x27;，</span><br><span class="line">    params:&#123;_id:111&#125; //传的参数，类似于data:&#123;&#125;形式</span><br><span class="line">&#125;).then((data)=&gt;&#123;</span><br><span class="line">    console.log(data) //这里返回的data是请求成功后的所有状态信息（无用信息较多）</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>请求跨域：</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>this.$http.jsonp(‘url’ {})</td>
<td><a class="link"   href="https://cdn.jsdelivr.net/npm/vue-resource@1.3.4" >https://cdn.jsdelivr.net/npm/vue-resource@1.3.4<i class="fas fa-external-link-alt"></i></a></td>
</tr>
<tr>
<td>fetch(‘url’)</td>
<td><a class="link"   href="https://cdn.bootcss.com/fetch/2.0.4/fetch.min.js" >https://cdn.bootcss.com/fetch/2.0.4/fetch.min.js<i class="fas fa-external-link-alt"></i></a></td>
</tr>
</tbody>
</table>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.$http.jsopn(&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=12&#x27;,&#123;</span><br><span class="line">    jsonp:&#x27;cb&#x27;</span><br><span class="line">&#125;).then(function(data)&#123;</span><br><span class="line">    console.log(data.body.s) //拿到此接口的数据信息</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch(&#x27;http://jx.xuzhixiang.top/ap/api/productlist.php&#x27;).then((data)=&gt;&#123;</span><br><span class="line">    return data.json();</span><br><span class="line">&#125;).then((data)=&gt;&#123;</span><br><span class="line">    console.log(data); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>crawlee</title>
    <url>/2022/12/02/crawlee/</url>
    <content><![CDATA[<!-- /docs/introduction/setting-up -->
<blockquote>
<p>爬取网页数据的一个工具crawlee, 地址： <a class="link"   href="https://crawlee.dev" >https://crawlee.dev<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx crawlee create my-crawler</span><br><span class="line"></span><br><span class="line">cd my-crawler</span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h4>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CheerioCrawler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;crawlee&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crawler = <span class="keyword">new</span> <span class="title class_">CheerioCrawler</span>(&#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">requestHandler</span>(<span class="params">&#123; $, request &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> title = $(<span class="string">&#x27;title&#x27;</span>).<span class="title function_">text</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The title of &quot;<span class="subst">$&#123;request.url&#125;</span>&quot; is: <span class="subst">$&#123;title&#125;</span>.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> crawler.<span class="title function_">run</span>([<span class="string">&#x27;https://www.baidu.com&#x27;</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>esp32蓝牙控制LED灯</title>
    <url>/2022/06/21/esp32%E8%93%9D%E7%89%99%E6%8E%A7%E5%88%B6LED%E7%81%AF/</url>
    <content><![CDATA[<blockquote>
<p>前几个月买了esp32，想实现通过蓝牙来控制led灯，但是工作和琐碎的生活导致没时间也没精力去做，今天终于花时间实现了，记录一下</p>
</blockquote>
<h4>材料准备</h4> 
<ul>
<li>esp32开发板</li>
<li>杜邦线若干</li>
<li>LED灯<br />
通过淘宝购买，一共应该不超过30元，其中开发板16元，杜邦线几元钱，LED灯也是几元钱，可以说非常便宜<br /><br /></li>
</ul>
<p><b>ESP32简单介绍</b><br /><br />
ESP32 性能稳定，具有低耗特性，而且带有wifi和蓝牙模块，可以说这个价格下非常好了。<br /><br />
<a class="link"   href="https://blog.csdn.net/Better_man1/article/details/124249742" >ESP32的硬件介绍<i class="fas fa-external-link-alt"></i></a><br /><br />
这里贴一下乐鑫的<a class="link"     href="https://www.espressif.com.cn/zh-hans/products/socs/esp32" >官网<i class="fas fa-external-link-alt"></i></a></p>
<p><b>开发环境准备</b><br /></p>
<ol>
<li>安装VS code, 然后安装Espressif IDF和PlatformIO IDE插件</li>
<li>创建项目，选择ESP32的模块<br /></li>
</ol>
<p>具体这里不在详细描述，可参考网上的视频教程关键词：Vscode+Esp32<br /></p>
<p><b>代码编写</b></p>
<figure class="highlight h"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;BluetoothSerial.h&gt;</span></span></span><br><span class="line">BluetoothSerial SerialBT;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> state = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> RGB_Blue = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> RGB_RED = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> RGB_GREEN = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// BLEDevice::init(&quot;ESP32BLE&quot;);</span></span><br><span class="line">  SerialBT.begin(<span class="string">&quot;SONDER_xiaomi&quot;</span>); <span class="comment">// 如果没有参数传入则默认是蓝牙名称是: &quot;ESP32&quot;</span></span><br><span class="line">  SerialBT.setPin(<span class="string">&quot;1234&quot;</span>);         <span class="comment">// 蓝牙连接的配对码</span></span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;BT initial ok and ready to pair. \r\n&quot;</span>);</span><br><span class="line">  pinMode(RGB_RED, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (Serial.available())</span><br><span class="line">  &#123;</span><br><span class="line">    SerialBT.write(Serial.read());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (SerialBT.available())</span><br><span class="line">  &#123;</span><br><span class="line">    state = SerialBT.read();</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      Serial.<span class="built_in">printf</span>(<span class="string">&quot;flash light \r\n&quot;</span>);</span><br><span class="line">      digitalWrite(RGB_RED, HIGH);</span><br><span class="line">      delay(<span class="number">1000</span>); </span><br><span class="line">      digitalWrite(RGB_RED, LOW);  </span><br><span class="line">      delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      Serial.<span class="built_in">printf</span>(<span class="string">&quot;turn on \r\n&quot;</span>);</span><br><span class="line">      digitalWrite(RGB_RED, HIGH); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      Serial.<span class="built_in">printf</span>(<span class="string">&quot;turn off \r\n&quot;</span>);</span><br><span class="line">      digitalWrite(RGB_RED, LOW);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  delay(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br />
以上就是控制LED灯的逻辑代码<br />
<br />
<b>踩的坑</b><br />
  1.  波特率的设置<br />
  2.  蓝牙的调试<br />
<br />
总之就是一步一错，摸着石头过河，不过好歹算是实现了 <br />
<br />
<b>遗留问题</b><br />
  1.  串口的中文乱码<br />
  2.  小程序蓝牙搜索不到（已解决）<br />
<br />
这些遗留问题暂时没得到解决，等之后会再研究做补充<br />
<p>本人不是做嵌入式开发，所以过程极其缓慢，这里的记录仅做参考，其实主要是自己想记录一下，细节部分懒得写了。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>esp32</tag>
        <tag>蓝牙</tag>
      </tags>
  </entry>
  <entry>
    <title>export/export default</title>
    <url>/2020/05/19/export-default/</url>
    <content><![CDATA[<h4 id="es导入导出模块"><a class="markdownIt-Anchor" href="#es导入导出模块"></a> ES导入导出模块</h4>
<blockquote>
<p>ES模块较为清晰，时常在项目中使用</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/05/19/eMklPNB8H4aYgKo.png"
                      alt="image" 
                ></p>
<ul>
<li>export栗子</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">abc</span> (a,b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者这样导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;abc&#125;</span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123;abc&#125; <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>export default栗子</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span> (a,b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a +b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ttt</span> (a,b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a +b</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    abc,</span><br><span class="line">    ttt</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> methods <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>ES</tag>
        <tag>模块系统</tag>
        <tag>import</tag>
      </tags>
  </entry>
  <entry>
    <title>exports</title>
    <url>/2020/05/19/exports/</url>
    <content><![CDATA[<h4 id="node模块"><a class="markdownIt-Anchor" href="#node模块"></a> node模块</h4>
<blockquote>
<p>node模块是基于commonJs规范的</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/05/19/blsnL6GvR3daFy9.png"
                      alt="image" 
                ></p>
<ul>
<li>exports栗子</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">abc</span> = abc</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> &#123;abc&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./index.js&#x27;</span>)</span><br><span class="line"><span class="comment">// abc(1,2)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>module.exports栗子</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    abc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> &#123;abc&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./index.js&#x27;</span>)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// const methods = require(&#x27;./index.js&#x27;)</span></span><br><span class="line"><span class="comment">// const &#123;abc&#125; = methods</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>commonJS</tag>
        <tag>exports</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp</title>
    <url>/2019/06/18/gulp/</url>
    <content><![CDATA[<h5 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h5>
<p>安装gulp:前提先安装node.js环境然后在进行如下安装<br />
<code>npm install gulp -g</code> 全局安装<br />
<code>npm install gulp --save-dev</code> 安装依赖</p>
<hr />
<h5 id="初始化工程"><a class="markdownIt-Anchor" href="#初始化工程"></a> 初始化工程：</h5>
<ol>
<li>新建文件夹
<ol>
<li>mkdir 文件夹名称</li>
<li>cd 命令进入工程文件夹下</li>
<li>创建package.json文件</li>
<li>手动创建或者命令创建</li>
<li>npm init输入相关信息<br />
然后发现没有gulp 这个时候就需要输入<br />
<code>npm install gulp --save-dev</code> 然后出现一个node_modules/ 文件夹</li>
</ol>
</li>
<li>有配置文件的话 直接输入npm install就可以了</li>
</ol>
<hr />
<h5 id="创建任务"><a class="markdownIt-Anchor" href="#创建任务"></a> 创建任务</h5>
<p>在根目录下创建一个文件  gulpfile.js<br />
<code>var gulp = require(&quot;gulp&quot;);</code> // 引入<br />
<code>gulp.task(&quot;hello&quot;，function（） &#123; //第一个参数是任务名，第二个是执行的任务功能 &#125;)</code><br />
写完之后，在文件所在目录打开cmd 输入<code>gulp hello</code>  //(文件名)</p>
<hr />
<p>gulp.task(“default”,function(){}) 有回调函数，但也可以定义数组<br />
gulp.task(“default”,[‘hello’ , …]);数组里放任务名，这样在cmd里直接键入 gulp即可执行</p>
<hr />
<p><code>gulp.src()</code>可以找出将要处理的文件，然后<code>pipe()</code>去处理这些找到的文件。<code>pipe()</code>可以理解为管道，每个管道就可以指定它的功能，最后使用<code>gulp.dest()</code>来放到指定的地方</p>
<hr />
<h5 id="使用gulp来实现文件的copy"><a class="markdownIt-Anchor" href="#使用gulp来实现文件的copy"></a> 使用gulp来实现文件的copy</h5>
<p>首先在我们工程目录下新建一个测试使用的index.html, 然后写入相应的内容<br />
在我们的gulpfile.js文件中输入以下内容：<br />
<code>var gulp = (&quot;gulp&quot;)</code><br />
<code>gulp.task(&quot;copyHtml&quot;,function()&#123; gulp.src(&quot;index.html&quot;).pipe(gulp.dest(&quot;dist&quot;)); &#125;)</code><br />
以上代码是首先引入gulp工具，创建任务，任务名是“copyHtml”,找到文件名，这个文件，名可以是这样&quot; *.html&quot;(所有.html的文件)，然后处理，复制到dist这个文件名下，如果没有则会生成一个“dist”的目录，一般这里时网站根目录，里面的文件不做修改，只在源码中做修改；<br />
最后在环境中执行  gulp copyHtml就可以了  OR  gulp.task(“default”,[“copyHtml”]) ,然后直接 gulp；</p>
<hr />
<p>拷贝图片文件，从某一个工程下面拷贝图片到指定的地方，类似于上一个方法；</p>
<hr />
<p>两个文件夹同时拷贝到某一个文件夹下<br />
<code>gulp.task(&quot;data&quot;, function()&#123;     gulp.src([&quot;js/*.js&quot; , &quot;json/*.json&quot;]).pipe(gulp.dest(&quot;dist/data&quot;)); &#125;)</code><br />
将js文件下所有的js文件和json下的所有的json文件放到dist目录下的data文件里；</p>
<hr />
<p>另外 排除文件拷贝<br />
gulp.task(‘data’,function(){<br />
return    gulp.src([‘xml/<em>.xml’,‘json/</em>.json’ ,  ‘!json/b.json’ ]).pipe(gulp.dest(‘dist/ data’));<br />
})<br />
!json/b.json排除某个文件</p>
<hr />
<h5 id="多个任务执行"><a class="markdownIt-Anchor" href="#多个任务执行"></a> 多个任务执行</h5>
<p><code>gulp.task(&quot;build&quot; , [&quot;hello&quot;,&quot;copyHtml&quot;,&quot;data&quot;])</code></p>
<p>在中括号后也可加上回调函数，例如function（）{ console.log(“编译成功”)}；</p>
<hr />
<h5 id="侦测文件变化-实时更新"><a class="markdownIt-Anchor" href="#侦测文件变化-实时更新"></a> 侦测文件变化 实时更新</h5>
<p><code>gulp.task(&quot;watch&quot;,function()&#123;     gulp.watch(&quot;index.html&quot;,[&quot;copyHtml&quot;]);     gulp.watch(&quot;imags/**/*.&#123;jpg,png&#125;&quot;,&quot;[imags]&quot;) &#125;)</code><br />
解读：使用此方法名 gulp.watch（“index.html”，[“copyHtml”]），第一个参数是文件，第一个参数是任务名  将此任务放到“default”，实时侦测 更新</p>
<hr />
<p>Gulp插件 :  访问网站 <a class="link"   href="http://gulpjs.com/plugins" >http://gulpjs.com/plugins<i class="fas fa-external-link-alt"></i></a><br />
如果npm安装失败 可尝试cnpm进行安装  =&gt; 淘宝镜像：（npm install -g cnpm --registry=<a class="link"   href="https://registry.npm.taobao.org" >https://registry.npm.taobao.org<i class="fas fa-external-link-alt"></i></a>）;<br />
gulp sass ：命令行安装依赖  npm install gulp-sass --save-dev<br />
安装好插件后，首先引入  const  sass = require(“gulp-sass”);<br />
gulp.task(“sass”,function(){<br />
gulp.src(“test.scss”)  //找到文件<br />
.pipe(sourcemaps.init())<br />
.pipe(sass({outputStyle:“compressed”}))  //压缩格式<br />
.pipe(sourcemaps.write())<br />
.pipe(gulp.dest(“dist/css”));<br />
})<br />
解读： 创建任务，先找到scss文件，执行sass()方法转换成css文件，再拷贝给dist下css文件名里；<br />
其中  sourcemaps.init()      sourcemaps.write() ； 是为了在实际开发中，将浏览器里的样式变为scss文件，这样只要在scss里开发代码就行了，将sass功能 写在“default”里，这样实时更新css里代码      当然，要先安装gulp-sourcemaps 然后引入</p>
<hr />
<h5 id="gulpconnect-搭建本地服务"><a class="markdownIt-Anchor" href="#gulpconnect-搭建本地服务"></a> gulp.connect 搭建本地服务</h5>
<p>安装<code>gulp.connect :  npm install gulp-connect  --save-dev</code><br />
然后引入  <code>const connect = require(&quot;gulp-connect&quot;);</code><br />
创建一个任务：<br />
<code>gulp.task(&quot;server&quot; , function()&#123;  connect.server(&#123; root : &quot;dist&quot; ,  // 网站根目录 livereload : true &#125;) &#125;)</code><br />
安装好，写以上代码，将此任务，写到 “default”默认里  时刻监听；</p>
<p>修改文件后页面自动刷新<br />
注意：实时监听，文件内容的变化，从而根目录下的copy文件也实时更新，但是页面实时更新是要在最后加入<br />
<code>pipe(connect.reload())</code><br />
这个方法加在需要改变的任务里，比如所有的html文件，比如所有的css文件，比如所有的js文件</p>
<hr />
<h5 id="合并文件插件gulp-concat"><a class="markdownIt-Anchor" href="#合并文件插件gulp-concat"></a> 合并文件插件gulp-concat:</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令行安装 npm install gulp-concat --save-dev </span></span><br><span class="line"><span class="comment">// 在gulpfile.js 中写入：</span></span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">&#x27;gulp-concat&#x27;</span>); </span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;concat&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">	 gulp.<span class="title function_">src</span>([<span class="string">&#x27;js/a.js&#x27;</span>,<span class="string">&#x27;js/b.js&#x27;</span>])</span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;main.js&#x27;</span>))</span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js&#x27;</span>));</span><br><span class="line"> &#125;) </span><br></pre></td></tr></table></figure>
<hr />
<h5 id="将合并js文件进行压缩gulp-uglify"><a class="markdownIt-Anchor" href="#将合并js文件进行压缩gulp-uglify"></a> 将合并js文件进行压缩gulp-uglify</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令行安装 npm install gulp-uglify --save-dev </span></span><br><span class="line"><span class="comment">// 在gulpfile.js 中</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;uglify&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">	 gulp.<span class="title function_">src</span>([<span class="string">&#x27;js/a.js&#x27;</span>,<span class="string">&#x27;js/b.js&#x27;</span>]) </span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;main.js&#x27;</span>)) </span><br><span class="line">	.<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">	.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js&#x27;</span>)); </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
<hr />
<h5 id="安装gulp-rename插件"><a class="markdownIt-Anchor" href="#安装gulp-rename插件"></a> 安装gulp-rename插件</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 命令行安装 npm install gulp-rename --save-dev</span></span><br><span class="line">   <span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>);</span><br><span class="line">   gulp.<span class="title function_">task</span>(<span class="string">&#x27;rename&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">   <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;js/a.js&#x27;</span>,<span class="string">&#x27;javascripts/b.js&#x27;</span>]) </span><br><span class="line">   .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;main.js&#x27;</span>)) </span><br><span class="line">   .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js&#x27;</span>)) </span><br><span class="line">   .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">   .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(<span class="string">&#x27;main.min.js&#x27;</span>)) </span><br><span class="line">   .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js&#x27;</span>));</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
<hr />
<h5 id="如何压缩css"><a class="markdownIt-Anchor" href="#如何压缩css"></a> 如何压缩css</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install gulp-sass --save-dev</span><br><span class="line"><span class="comment">// 命令行安装 </span></span><br><span class="line">npm install gulp-clean-css --save-dev</span><br><span class="line"><span class="keyword">var</span> cleanCss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>); </span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;cleanCss&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line"><span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;stylesheet/**/*.scss&#x27;</span>) </span><br><span class="line"> .<span class="title function_">pipe</span>(<span class="title function_">sass</span>())</span><br><span class="line"> .<span class="title function_">pipe</span>(cleanCss ())</span><br><span class="line"> .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/css&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<hr />
<h5 id="将es6转换成es5"><a class="markdownIt-Anchor" href="#将es6转换成es5"></a> 将ES6转换成ES5</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm install babel-cli --save-dev  npm install babel-preset-es2015 --save-dev</span><br><span class="line">npm view *** versions</span><br><span class="line"><span class="comment">// 安装插件npm install  gulp-babel  --save-dev</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;babel&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&quot;ES6.js&quot;</span>)  </span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;“presets”:[“es2015”]&#125;))  </span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist/js&quot;</span>));  </span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>
<hr />
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/08/01/hello-world/</url>
    <content><![CDATA[<p>记录输出的一行代码</p>
<h3 id="第一行代码"><a class="markdownIt-Anchor" href="#第一行代码"></a> 第一行代码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Hello</span> <span class="title class_">World</span>!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>html打印小票的总结</title>
    <url>/2022/01/06/html%E6%89%93%E5%8D%B0%E5%B0%8F%E7%A5%A8%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="html打印小票的总结"><a class="markdownIt-Anchor" href="#html打印小票的总结"></a> html打印小票的总结</h3>
<blockquote>
<p>这个打印的问题困扰了两天，最开始是通过html2canvas，但是转成的图片模糊，一直得不到好的解决，于是放弃了这种思路。改用系统的打印，于是一切变得简单了，但是又出现了新的问题，就是无法控制打印的字体，在无计可施之时，随手改宽度打了两个小票，发现居然字体变小了！又改了两次发现宽度的值越大，打印到纸上的字体大小就越小，这就解决了无法控制打印字体大小的问题</p>
</blockquote>
<p>首先写一下html模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- // 这里多加一层div是因为dom树中没有父级，都可以 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>入库日期：2021-01-05<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>品牌：雅培<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>效期：2021-01-05<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>物料编码：测试物料编码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span> 批号：4445551122666 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>名称：测试物料222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>原厂编码：8584546654654<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>规格：测试无力哦奥委屈额群无<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;code&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://s2.loli.net/2022/01/06/hF8mtpvz4YjIiE1.png&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置一下样式表</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">          <span class="comment">/* width设置越宽，最终打印到纸上的字体越小 */</span></span><br><span class="line">          <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">113px</span>;</span><br><span class="line">          <span class="attribute">position</span>: relative;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">          <span class="attribute">flex-direction</span>: column;</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">          <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">6px</span>;</span><br><span class="line">          <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.name</span> &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">6px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">html</span>,</span><br><span class="line">      <span class="selector-tag">body</span> &#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">6px</span>;</span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>打印</tag>
      </tags>
  </entry>
  <entry>
    <title>jest四个钩子函数</title>
    <url>/2020/06/07/jest%E5%9B%9B%E4%B8%AA%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>beforeAll</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeAll</span>(<span class="function">()  =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// console.log(&#x27;所有测试用例之前执行&#x27;)</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>beforeEach</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(<span class="function">()  =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// console.log(&#x27;每个测试用例之前执行&#x27;)</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>afterEach</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">afterEach</span>(<span class="function">()  =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// console.log(&#x27;每个测试用例之后执行&#x27;)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>afterAll</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">afterAll</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// console.log(&#x27;所有测试用例之后执行&#x27;)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JEST</tag>
        <tag>钩子函数</tag>
      </tags>
  </entry>
  <entry>
    <title>jest测试框架</title>
    <url>/2020/05/19/jest%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<hr />
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://jestjs.io/img/blog/20-multi-runner.gif"
                      alt="image" 
                ></p>
<h3 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在pages.json的script项中添加&quot;test&quot;:&quot;jest&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>:<span class="string">&quot;jest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">npm run jest</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 测试index.js</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// index.test.js</span></span><br><span class="line"><span class="comment">//  index的函数暴露是export function abc()&#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> &#123;abc&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./index.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试abc这个函数&#x27;</span>,<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">abc</span>(<span class="number">1</span>,<span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JEST</tag>
      </tags>
  </entry>
  <entry>
    <title>jr-qrcode将文本生成base64二维码</title>
    <url>/2022/01/07/jr-qrcode%E5%B0%86%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90base64%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>在打印标签时，需要生成二维码，这个需求是先将文本生成二维码且要有一个图片地址，base64，所以找到了这个插件</p>
</blockquote>
<ul>
<li>所传入的值必须是字符串形式，不然不能扫码成功</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jrQrcode = <span class="built_in">require</span>(<span class="string">&#x27;jr-qrcode&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> imgBase64 = jrQrcode.<span class="title function_">getQrBase64</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title>next</title>
    <url>/2020/07/06/next/</url>
    <content><![CDATA[<blockquote>
<p>基于react技术栈的服务端渲染解决方案</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装脚手架快速创建项目</span></span><br><span class="line">npm install -g create-next-app</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建项目</span></span><br><span class="line">npx create-next-app next-create</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>使用antd</p>
<ul>
<li>安装依赖</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add @zeit/next-css  antd  babel-plugin-<span class="keyword">import</span> </span><br><span class="line"><span class="comment">// or </span></span><br><span class="line">npm i --save @zeit/next-css  antd  babel-plugin-<span class="keyword">import</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>创建next-config.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">&quot;@zeit/next-css&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">require</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line"> <span class="built_in">require</span>.<span class="property">extensions</span>[<span class="string">&quot;.css&quot;</span>] = <span class="function"><span class="params">file</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="title function_">withCss</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>创建.babelrc</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>:[<span class="string">&quot;next/babel&quot;</span>],</span><br><span class="line"> <span class="string">&quot;plugins&quot;</span>:[</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;import&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;libraryName&quot;</span>:<span class="string">&quot;antd&quot;</span>,</span><br><span class="line">            <span class="string">&quot;style&quot;</span>:<span class="string">&quot;css&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">    ]</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建 ._app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;next/app&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;antd/dist/antd.css&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>next服务端渲染</title>
    <url>/2020/07/07/next%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<p>next</p>
<blockquote>
<p>基于react技术栈的服务端渲染解决方案</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装脚手架快速创建项目</span></span><br><span class="line">npm install -g create-next-app</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建项目</span></span><br><span class="line">npx create-next-app next-create</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>使用antd</p>
<p>安装依赖</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yarn add @zeit/next-css  antd  babel-plugin-<span class="keyword">import</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// or </span></span><br><span class="line"></span><br><span class="line">npm i --save @zeit/next-css  antd  babel-plugin-<span class="keyword">import</span> </span><br></pre></td></tr></table></figure>
<p>创建next-config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">&quot;@zeit/next-css&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">require</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">require</span>.<span class="property">extensions</span>[<span class="string">&quot;.css&quot;</span>] = <span class="function"><span class="params">file</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="title function_">withCss</span>(&#123;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建.babelrc</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;presets&quot;</span>:[<span class="string">&quot;next/babel&quot;</span>],</span><br><span class="line">    </span><br><span class="line"> <span class="string">&quot;plugins&quot;</span>:[</span><br><span class="line">    </span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;import&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="string">&quot;libraryName&quot;</span>:<span class="string">&quot;antd&quot;</span>,</span><br><span class="line">            <span class="string">&quot;style&quot;</span>:<span class="string">&quot;css&quot;</span></span><br><span class="line">    </span><br><span class="line">         &#125;</span><br><span class="line">    </span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">   ]</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建 ._app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;next/app&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;antd/dist/antd.css&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NEXT</tag>
      </tags>
  </entry>
  <entry>
    <title>react生命周期</title>
    <url>/2019/07/31/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="react生命周期"><a class="markdownIt-Anchor" href="#react生命周期"></a> react生命周期</h2>
<ol>
<li>初始化阶段 Initialization</li>
<li>挂载阶段 Mounting</li>
<li>更新阶段[props,state]更新阶段，<b>不能修改state的值</b></li>
<li>卸载阶段</li>
</ol>
<table>
<thead>
<tr>
<th>React</th>
<th>生命周期</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化阶Initialization</td>
<td>初始化阶段,加载阶段，由jsx转换成真实DOM</td>
</tr>
<tr>
<td>挂载阶段 Mounting</td>
<td>挂载阶段，三个函数 componentWillMount render componentDidMount</td>
</tr>
<tr>
<td>更新阶段 Updation</td>
<td>更新阶段，props  state</td>
</tr>
<tr>
<td>卸载阶段 Unmounting</td>
<td>销毁阶段，componentWillUnmount</td>
</tr>
</tbody>
</table>
<ul>
<li>==组件挂载阶段==</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>挂载阶段Mounting</th>
</tr>
</thead>
<tbody>
<tr>
<td>componentWillMount</td>
<td>组件将要挂载，此函数直接执行</td>
</tr>
<tr>
<td>render</td>
<td>在组件将要挂载之后，组件挂载完成之前执行的函数，也就是执行完后，执行组件挂载完成函数</td>
</tr>
<tr>
<td>componentDidMount</td>
<td>组件挂载完成。可以在这里请求数据</td>
</tr>
</tbody>
</table>
<ul>
<li>==组件更新阶段Updation==</li>
</ul>
<table>
<thead>
<tr>
<th>props,state</th>
<th>更新阶段说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>componentWillReceiveProps</td>
<td>==props==属性才具有此函数阶段，有两个参数，第一个是父组件通过props传来的，第二个是子组件自身的属性或者state数据</td>
</tr>
<tr>
<td>shouldComponentUpdate(np,ns)</td>
<td>return true 将数据更新，组件重新加载渲染，为false时，数据变化，但组件不重新渲染</td>
</tr>
<tr>
<td>componentWillUpdate</td>
<td>组件将要更新</td>
</tr>
<tr>
<td>render</td>
<td>在更新完成之前，重新渲染页面，加载组件</td>
</tr>
<tr>
<td>componentDidUpdate</td>
<td>组件更新完成之后的函数</td>
</tr>
</tbody>
</table>
<ul>
<li>==销毁组件==</li>
</ul>
<table>
<thead>
<tr>
<th>Unmounting</th>
<th>组件销毁</th>
</tr>
</thead>
<tbody>
<tr>
<td>componentWillUnmount</td>
<td>组件销毁，当组件销毁时，执行此函数，组件销毁后，display:none的性质</td>
</tr>
</tbody>
</table>
<ul>
<li>销毁组件也可以这样做<br />
==ReactDom.unmountComponentAtNode(document.getElementById(‘app’)==</li>
</ul>
<p>1.生命周期整体流程–实例化</p>
<ul>
<li>getDefaultProps 取得默认属性</li>
<li>getlnitialState  初始化阶段</li>
<li>componentWillMount  即将进入dom</li>
<li>render 描绘dom</li>
<li>componentDidMount 已经进入dom</li>
</ul>
<h3 id="通过ref来拿到dom节点里的内容"><a class="markdownIt-Anchor" href="#通过ref来拿到dom节点里的内容"></a> 通过ref来拿到dom节点里的内容</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">    return &lt;h3 ref=&#x27;txt&#x27;&gt;这里是内容&lt;/h3&gt;</span><br><span class="line">&#125;</span><br><span class="line">componentWillMount()&#123;</span><br><span class="line">    console.log(this.refs.txt.innerHTML) //这里是拿不到的</span><br><span class="line">&#125; </span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">    console.log(this.refs.txt.innerHTML) //可以拿到</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>nodeJs</title>
    <url>/2019/06/18/nodeJs/</url>
    <content><![CDATA[<blockquote>
<p>node.js 是一个基于Chrome V8引擎的javascript运行环境，node.js使用了事件驱动，非阻塞式I/O的模型，使其轻量又高效</p>
</blockquote>
<p>一个单独的文件就是一个模块，模块内将需要对外暴露的变量放到<code>exports</code>对象里，可以是任意对象，函数，数组等，未放到<code>exports</code>对象里的都是私有的。用<code>require</code>方法加载模块，即读取模块文件获得<code>exports</code>对象。</p>
<p>NPM是随同NodeJS一起安装的包管理工具</p>
<p>常见命令 <code>install uninstall update search list</code></p>
<blockquote>
<p>package.json：定义了一个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）</p>
</blockquote>
<p>操作：–require(‘url’)<br />
node<br />
url——提供很多方法<br />
url.parse(urlString)查询url信息<br />
url.format(urlObject)将信息解析成正常的url地址<br />
url.resolve(from, to)将两个url解析成一个完整的url   返回从根目录指定到当前目录的绝对路径url，一个标准的url格式<br />
用于解析与格式化 URL 查询字符串-require(‘querystring’)<br />
querystring.escape(str)解析对象，字符串（汉字）<br />
querystring.parse(str[, sep[, eq[, options]]])转换成对象<br />
querystring.stringify(obj[, sep[, eq[, options]]])转换成字符串<br />
querystring.unescape(str)解析escape转换的编码，解析成汉字</p>
<p>module.exports //暴露数据<br />
例module.exports.变量名</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>react组件</title>
    <url>/2019/07/29/react%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="react"><a class="markdownIt-Anchor" href="#react"></a> react</h2>
<ul>
<li>react是facebook出的的针对view视图层的库。<br><br />
在使用react开发时，可以使用很多第三方插件。<br></li>
</ul>
<h1 id="jsx"><a class="markdownIt-Anchor" href="#jsx"></a> jsx</h1>
<ul>
<li>直接使用html标签</li>
</ul>
<p>组件定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--函数定义--&gt;</span><br><span class="line">&lt;div id=&#x27;app&#x27;&gt;&lt;/div&gt;</span><br><span class="line">function App()&#123;</span><br><span class="line">    return (&lt;h2&gt;...&lt;/h2&gt;)</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;App /&gt;,document.getElementById(&#x27;app));</span><br><span class="line">&lt;!--ES6 class定义--&gt;</span><br><span class="line">const &#123; Component &#125; = React;</span><br><span class="line">class App extends Component&#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        super(props)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (&lt;h2&gt;...&lt;/h2&gt;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;App /&gt;,document.getElementById(&#x27;app));</span><br></pre></td></tr></table></figure>
<h2 id="传值"><a class="markdownIt-Anchor" href="#传值"></a> 传值</h2>
<ul>
<li>通过父组件传值给子组件-&gt;props</li>
<li>子组件给父组件传值使用方法调用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id =&#x27;app&#x27;&gt;&lt;/div&gt;</span><br><span class="line">function Nav(props)&#123;</span><br><span class="line">   // const &#123; name &#125; = props 这里不加this  在class里定义的组件，传参需要加this</span><br><span class="line">    return (&lt;h2&gt; &#123; props.name &#125;&lt;/h2&gt;)</span><br><span class="line">&#125;</span><br><span class="line">function App()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Nav name=&#123;123&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;,document.getElementById(&#x27;app&#x27;))</span><br></pre></td></tr></table></figure>
<ul>
<li>子组件给父组件传值使用方法调用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&#x27;app&#x27;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;script type=&#x27;text/babel&#x27;&gt;</span><br><span class="line">       const &#123; Component &#125; = React</span><br><span class="line">           class Child extends Component&#123;</span><br><span class="line">               constructor(props)&#123;</span><br><span class="line">                   super(props)</span><br><span class="line">               &#125;</span><br><span class="line">      </span><br><span class="line">           render()&#123;</span><br><span class="line">               return (</span><br><span class="line">                   &lt;div&gt;</span><br><span class="line">                       &lt;h2&gt;这里是子组件&lt;/h2&gt;</span><br><span class="line">                       &lt;button onClick=&#123;()=&gt;this.props.toParent(event)&#125;&gt;点击&lt;/button&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">               )</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">      class App extends Component &#123;</span><br><span class="line">       onClickHandle(e)&#123;</span><br><span class="line">           console.log(e.target)//这里打印的是事件源，当参数为event时，才会打印事件源</span><br><span class="line">       &#125;</span><br><span class="line">       render()&#123;</span><br><span class="line">          return (</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                 &lt;Child toParent=&#123;this.onClickHandle.bind(this)&#125;/&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">       ReactDOM.render(&lt;App /&gt;,document.getElementById(&#x27;app&#x27;))</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>== 当子组件是通过函数来定义的，那么想要获得事件源时，第一个括号要加参数e</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Child()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;button onClick=&#123;(e)=&gt;props.toParent(e)&#125;&gt;点击&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数组件和类组件的区别"><a class="markdownIt-Anchor" href="#函数组件和类组件的区别"></a> 函数组件和类组件的区别</h2>
<ol>
<li>函数定义的组件不会被实例化,整体渲染性能得到提升</li>
<li>函数定义的组件不能访问this对象</li>
<li>函数定义的组件无法访问生命周期的方法</li>
<li>函数定义的无状态组件只能访问输入的props,无副作用</li>
</ol>
<ul>
<li>何时该使用函数式组件<br><br />
函数式组件相比类组件，拥有更好的性能和更简单的职责，十分适合分割原本庞大的组件，未来 React 也会对函数式组件进行一系列的优化，譬如无意义检查和内存分配领域相关的优化。所以只有有可能，尽量使用函数式组件。</li>
</ul>
<p>ps: forEach只循环没有返回值。<br />
map循环之后，会生成新的数组对象，生成的数组内容为每一次的返回值。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp的体验</title>
    <url>/2022/10/27/uniapp%E7%9A%84%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<blockquote>
<p>从18年开始使用HBuilder作为IDE进行开发，当时还是wapApp，打包极其方便，后来HBuilder X代替了HBuilder，算下来我也算是重度使用用户了，记录下这几年的使用心得。</p>
</blockquote>
<h5 id="hbuilder"><a class="markdownIt-Anchor" href="#hbuilder"></a> HBuilder</h5>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.haote.com%2Fupload%2Fgame%2F20140317%2Fhaote2014031793589.jpg&amp;refer=http%3A%2F%2Fimg.haote.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1669429278&amp;t=ebb6b2f7c5561697c99de28a8f55c987"
                      alt="image" 
                ></p>
<p>咳咳，每次看到这个界面都有一种怀旧感，那是我逝去的青春~</p>
<p>因为早已使用<b>HBuilder X</b>来开发，所以代码部分用<b>HBuilder X</b>来展示。<br />
这里是<a href='https://www.dcloud.io/hbuilderx.html' style='color:#42b983;'>官方文档</a></p>
<h5 id="uniapp"><a class="markdownIt-Anchor" href="#uniapp"></a> UNIAPP</h5>
<h6 id="uniapp介绍"><a class="markdownIt-Anchor" href="#uniapp介绍"></a> uniapp介绍</h6>
<p><b><code>uni-app</code></b>  是一个使用 <a class="link"   href="https://vuejs.org/" >Vue.js<i class="fas fa-external-link-alt"></i></a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。</p>
<p>DCloud公司拥有900万开发者、数百万应用、12亿手机端月活用户、数千款<b><code>uni-app</code></b>插件、70+微信/qq群。阿里小程序工具官方内置<b><code>uni-app</code></b>，腾讯课堂官方为uni-app录制培训课程，开发者可以放心选择。</p>
<p><b><code>uni-app</code></b>在手，做啥都不愁。即使不跨端，<b>uni-app</b>也是更好的小程序开发框架、更好的App跨平台框架、更方便的H5开发框架。不管领导安排什么样的项目，你都可以快速交付，不需要转换开发思维、不需要更改开发习惯。</p>
<h6 id="uniapp使用"><a class="markdownIt-Anchor" href="#uniapp使用"></a> uniapp使用</h6>
<p><a class="link"   href="https://uniapp.dcloud.net.cn/quickstart-hx.html" >快速上手<i class="fas fa-external-link-alt"></i></a></p>
<h5 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h5>
<ol>
<li>大概在2019年用<code>uniapp</code>来开发移动端应用的时候，真机体验十分不好，BUG较多</li>
<li>大概在2021年时，跨端开发的体验有明显的提高</li>
<li>用户量很多，因为<code>uniapp</code>开发的优势就是快速，高效，开发成本较低</li>
<li>开发APP时，会遇到苹果和安卓样式不一致的问题，总体都能处理</li>
<li>社区问答质量不太高，有时无法找到较好的解决办法</li>
<li>蓝牙模块兼容不是很好，获取不到蓝牙特征值</li>
<li>扫码准确度不够，错误率较高</li>
<li>配合<a class="link"   href="https://unicloud.dcloud.net.cn/" >uniCloud<i class="fas fa-external-link-alt"></i></a>, 可快速整合前后端数据库的交互</li>
</ol>
<p>整体而言，如果你追求快速高效的开发体验，<code>uniapp</code>是非常适合的选择，当然也可以选择<a class="link"   href="https://taro.jd.com/" >taro<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://www.reactnative.cn/" >RN<i class="fas fa-external-link-alt"></i></a><br />
期待<code>uniapp</code>越来越好</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>一次花销</title>
    <url>/2022/01/04/%E4%B8%80%E6%AC%A1%E8%8A%B1%E9%94%80/</url>
    <content><![CDATA[<ul>
<li>给小妹买电脑花了6700</li>
<li>还花呗9970</li>
</ul>
<p>肉疼</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>赚钱真难</tag>
      </tags>
  </entry>
  <entry>
    <title>不想上班</title>
    <url>/2022/07/31/%E4%B8%8D%E6%83%B3%E4%B8%8A%E7%8F%AD/</url>
    <content><![CDATA[<p>今天加班，不想上班可以吗？</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>上班</tag>
      </tags>
  </entry>
  <entry>
    <title>中文代码</title>
    <url>/2022/09/06/%E4%B8%AD%E6%96%87%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>如果代码用中文来写，会是什么样的？</p>
</blockquote>
<h4 id="中文代码"><a class="markdownIt-Anchor" href="#中文代码"></a> 中文代码</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 用户组 = [</span><br><span class="line">    &#123;</span><br><span class="line">        名字:<span class="string">&quot;小明&quot;</span>,</span><br><span class="line">        年龄: <span class="number">18</span>,</span><br><span class="line">        性别:<span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        名字:<span class="string">&quot;小红&quot;</span>,</span><br><span class="line">        年龄: <span class="number">18</span>,</span><br><span class="line">        性别:<span class="string">&quot;女&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> 女 = 用户组.<span class="title function_">find</span>(用户 =&gt; 用户.性别 == <span class="string">&quot;女&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> 男 = 用户组.<span class="title function_">find</span>(用户 =&gt; 用户.性别 == <span class="string">&quot;男&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(女) <span class="comment">// 结果为  &#123; &#x27;名字&#x27;: &#x27;小红&#x27;, &#x27;年龄&#x27;: 18, &#x27;性别&#x27;: &#x27;女&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(男) <span class="comment">// 结果为  &#123; &#x27;名字&#x27;: &#x27;小明&#x27;, &#x27;年龄&#x27;: 18, &#x27;性别&#x27;: &#x27;男&#x27; &#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="写一个class"><a class="markdownIt-Anchor" href="#写一个class"></a> 写一个class</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 动物 &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">动物名称</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.名字 = 动物名称</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    名字() &#123;</span><br><span class="line">      <span class="keyword">return</span>  <span class="variable language_">this</span>.名字</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    吃饭() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.名字 + <span class="string">&quot;开始吃饭&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    玩耍() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.名字 + <span class="string">&quot;开始玩耍&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> 真狗 = <span class="keyword">new</span> 动物(<span class="string">&quot;小狗&quot;</span>)</span><br><span class="line"></span><br><span class="line">真狗.吃饭() <span class="comment">// 结果： 小狗开始吃饭</span></span><br><span class="line">真狗.玩耍() <span class="comment">// 结果： 小狗开始玩耍</span></span><br></pre></td></tr></table></figure>
<h4 id="写一个循环"><a class="markdownIt-Anchor" href="#写一个循环"></a> 写一个循环</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 随机数组  = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> 外层数=<span class="number">0</span>; 外层数&lt;随机数组.<span class="property">length</span>; 外层数++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> 内层数=<span class="number">0</span>;内层数&lt;随机数组.<span class="property">length</span>;内层数++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(随机数组[外层数] &lt; 随机数组[内层数]) &#123;</span><br><span class="line">            <span class="keyword">let</span> 暂存数 =  随机数组[外层数]</span><br><span class="line">            随机数组[外层数] = 随机数组[内层数]</span><br><span class="line">            随机数组[内层数] = 暂存数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(随机数组) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line">或者这样排序</span><br><span class="line"></span><br><span class="line">随机数组.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  a - b</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(随机数组) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line">结果是一样的</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>临近过年的一些焦虑</title>
    <url>/2021/12/24/%E4%B8%B4%E8%BF%91%E8%BF%87%E5%B9%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E7%84%A6%E8%99%91/</url>
    <content><![CDATA[<ol>
<li>如何与一年没有见面的家里人说话，且显得不那么陌生</li>
<li>家里人都是互相比较的，对我而言不喜欢这样的内耗，该如何巧妙回避</li>
<li>问及我的收入，我该如何处理，坦诚的告诉还是直接拒绝讨论</li>
<li>相亲的时候如何技巧性的给人留下好的印象</li>
<li>观念不一致是继续坦诚讨论还是附和</li>
</ol>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>事件</title>
    <url>/2019/05/20/%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>事件基础  事件处理函数  事件对象</p>
<p>事件基础：<br />
JavaScript 事件是由访问 Web 页面的用户引起的一系列操作。<br />
当用户执行某些操作的时候，再去执行一系列代码。或者用来获取事件的详细信息，<br />
如鼠标位置、键盘按键等。</p>
<p>事件处理函数 ：<br />
javaScript可以处理的事件类型为：鼠标事件、键盘事件、HTML事件；<br />
所有的事件处理函数都会都有两个部分组成，on + 事件名称,函数体；</p>
<p>事件对象：<br />
当事件触发的时候，会产生一个事件对象，这个事件包含着与事件有关的所有信息，并且系统会生成一个隐藏的参数，这个参数就是event;<br />
onmousedown&gt; onmouseup&gt;onmouseclick</p>
<p>body如果没有设置高度  那么是由内容撑起来，鼠标活动区域也不是全部；<br />
clientX  可视区域；<br />
pageX  页面；<br />
offsetx   距当前操作对象的左上角。或者叫做事件源，直接出发某个事件产生的DOM对象；<br />
screenX  距离显示屏的左边距  或上边距；</p>
<p>clientwidth:和offsetwidth 一样  但不包括border</p>
<p>enter不支持冒泡   以及leave</p>
<p>ev.scroolTop = ev.scroolHeight;   可视区域距离页面顶部的距离，可以让滚动条向下自行滑动；</p>
<p>阻止事件冒泡的兼容写法：<br />
if(evt.stopPropagation){<br />
evt.stopPropagation();<br />
}else{evt.cancelBubble = true;<br />
}</p>
<p>找到事件触发的事件源的兼容写法：</p>
<p>(evt.target || evt.srcElement)</p>
<p>altKey属性，bool类型，表示发生事件的时候alt键是否被按下<br />
ctrlKey属性，bool类型，表示发生事件的时候ctrl键是否被按下<br />
shiftKey属性，bool类型，表示发生事件的时候shift键是否被按下</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>乌巢禅师《多心经》</title>
    <url>/2022/01/14/%E4%B9%8C%E5%B7%A2%E7%A6%85%E5%B8%88%E3%80%8A%E5%A4%9A%E5%BF%83%E7%BB%8F%E3%80%8B/</url>
    <content><![CDATA[<p>观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。<br />
舍利子，色不异空，空不异色，色即是空，空即是色，受想行识，亦复如是。<br />
舍利子，是诸法空相，不生不灭，不垢不净，不增不减,，是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界，乃至无意识界。<br />
无无明，亦无无明尽，乃至无老死，亦无老死尽。无苦集灭道，无智亦无得。以无所得故，菩提萨埵，依般若波罗蜜多故，心无挂碍。<br />
无挂碍故，无有恐怖，远离颠倒梦想，究竟涅槃。<br />
三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提，故知般若波罗蜜多，是大神咒，是大明咒，是无上咒，是无等等咒，能除一切苦，真实不虚。</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>多心经</tag>
      </tags>
  </entry>
  <entry>
    <title>云函数开发</title>
    <url>/2022/12/16/%E4%BA%91%E5%87%BD%E6%95%B0%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>官网地址： <a class="link"   href="https://uniapp.dcloud.net.cn/uniCloud/" >https://uniapp.dcloud.net.cn/uniCloud/<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="关联云服务空间"><a class="markdownIt-Anchor" href="#关联云服务空间"></a> 关联云服务空间</h4>
<p>创建uniapp项目后关联云服务空间<br />
可选： 阿里云和腾讯云</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20221216/%E5%85%B3%E8%81%94%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%A9%BA%E9%97%B4.p1qzqx425hc.webp"
                      alt="image" 
                ></p>
<p>如图<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20221216/%E4%BA%91%E5%87%BD%E6%95%B0.5iuqrgtx5rk0.webp"
                      alt="image" 
                ><br />
文件夹说明：</p>
<ul>
<li>cloudfunctions 云函数</li>
<li>database schema文件</li>
</ul>
<p>注意：database里的schema文件需要设置权限，如果非admin端操作，需要添加uniIdToken字段</p>
<p>如图<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20221216/schema.2z58apwj868.webp"
                      alt="image" 
                ></p>
<h4 id="关于云函数的packagejson"><a class="markdownIt-Anchor" href="#关于云函数的packagejson"></a> 关于云函数的package.json</h4>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20221216/pachage.36vp97yaty00.webp"
                      alt="image" 
                ></p>
<ul>
<li>说明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;uni-cloud-jql&quot;</span>: &#123;&#125; <span class="comment">// JQL语法，对象为空就好</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span>: <span class="string">&quot;Nodejs12&quot;</span>  <span class="comment">//  node版本</span></span><br></pre></td></tr></table></figure>
<h4 id="http请求"><a class="markdownIt-Anchor" href="#http请求"></a> http请求</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://www.xxx.ai/api&quot;</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> uniCloud.<span class="property">httpclient</span>.<span class="title function_">request</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">page</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 指定以application/json发送data内的数据</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span> <span class="comment">// 指定返回值为json格式，自动进行parse</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;返回结果&#x27;</span>, res)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>从零到一搭建个人博客（一）</title>
    <url>/2020/06/13/%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>18年的时候，我做了我人生中第一个网站，从网站代码到服务器，域名…就这样，我开始了对新世界的探索之旅。</p>
</blockquote>
<p>18年那个网站，如今早已不能再访问，在它刚入世的时候，我拿给一个后端同事看…，后端同事表示不错，就是界面不敢恭维…<br /><br />
纵使如此，我很开心，因此而受到了极大鼓舞，感谢当时的同事。<br /></p>
<p>就不扯以前的事了，在开始写这个系列之前，声明本人水平尚浅，写这类帖子不够专业，但会尽可能把我做这个博客用到的东西，以及如何解决遇到的问题都列出来，也算是一个记录吧。<br /></p>
<p><strong>所使用到的技术栈</strong></p>
<ul>
<li>React</li>
<li>AntdDesignUI</li>
<li>Nest</li>
</ul>
<blockquote>
<p>这个博客共有三个项目，两个前端项目，博客前台和后台管理系统，都使用React+AntD搭建，还有一个中台服务，使用nest做的，提供博客的数据服务。</p>
</blockquote>
<p><strong>React搭建前后台</strong></p>
<p>创建项目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn create react-app my-app --template typescript</span><br></pre></td></tr></table></figure>
<p>运行项目</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure>
<p>前台部分分为以下几个部分，把他们拆分出来做，这样方便管理，结构也比较清晰。</p>
<ul>
<li>Author.tsx 个人简介</li>
<li>Header.tsx 公共头部</li>
<li>Footer.tsx 公共底部</li>
<li>Msg.tsx    留言模块</li>
<li>list.tsx   文章列表</li>
<li>detail.tsx 文章详情</li>
</ul>
<p>以上是前台部分的主要模块划分，然后把通用的部分封装成组件，提高效率及可复用性，避免写重复的代码。<br /></p>
<p><strong>Markdown</strong></p>
<p>本博客的文章内容皆由MD语法编写，那么文章详情就必须要可以解析MD语法，这里使用了一款插件。</p>
<ul>
<li>为什么使用MD语法编写博客内容</li>
<li>MD语法有哪些优点</li>
</ul>
<p>Markdown将Md语法编写的语言转换成了HTML内容，方便灵活，内容丰富。另外本博客的内容主要以学习笔记为主，所以会牵扯到代码部分，于是就选择了md的内容解析。<br /></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装插件</span></span><br><span class="line">npm install marked --save</span><br><span class="line">npm install highlight.<span class="property">js</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动引用样式</span></span><br><span class="line"><span class="keyword">import</span> hljs  <span class="keyword">from</span> <span class="string">&#x27;highlight.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;highlight.js/styles/github.css&#x27;</span></span><br><span class="line"><span class="comment">// 文章内容</span></span><br><span class="line"><span class="keyword">let</span> markdown = content</span><br><span class="line"><span class="keyword">const</span> render = <span class="keyword">new</span> marked.<span class="title class_">Renderer</span>()</span><br><span class="line">marked.<span class="title function_">setOptions</span>(&#123;</span><br><span class="line">  <span class="attr">renderer</span>:render,</span><br><span class="line">  <span class="attr">highlight</span>: <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hljs.<span class="title function_">highlightAuto</span>(code).<span class="property">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">pedantic</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">gfm</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">breaks</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">sanitize</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">smartLists</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">smartypants</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">xhtml</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 解析成HTML</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="title function_">marked</span>(markdown, &#123; <span class="attr">renderer</span>: render &#125;) </span><br><span class="line"><span class="comment">// 节点使用</span></span><br><span class="line">&lt;div dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__html</span>:html&#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">// 相关配置参考官方文档</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//marked.js.org/#/USING_ADVANCED.md#highlight</span></span><br></pre></td></tr></table></figure>
<ul>
<li>路由配置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历路由列表</span></span><br><span class="line">&lt;<span class="title class_">Router</span> &gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">            routes.map((item,index)=&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">path</span>=<span class="string">&#123;item.path&#125;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;item.component&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Router</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install axios </span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装示例</span></span><br><span class="line"><span class="keyword">const</span> http = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;http://localhost:3001&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">xxx</span>(<span class="params">url,data,type = <span class="string">&#x27;GET&#x27;</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">await</span> <span class="title function_">http</span>(&#123;url,<span class="attr">params</span>:data, <span class="attr">method</span>:type&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>基本上，到这里准备工作就做的差不多了，src目录（个人）</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">src </span><br><span class="line">└─ components  <span class="comment">// 组件</span></span><br><span class="line">└─ api        <span class="comment">// 接口封装</span></span><br><span class="line">└─ static    <span class="comment">// 静态文件</span></span><br><span class="line">└─ routers  <span class="comment">// 路由文件</span></span><br><span class="line">└─ views   <span class="comment">// 页面</span></span><br></pre></td></tr></table></figure>
<p>博客地址</p>
<p>使用浏览器打开：<a class="link"   href="https://sonders.cn" >https://sonders.cn<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>blob</tag>
      </tags>
  </entry>
  <entry>
    <title>代码版本管理</title>
    <url>/2019/07/29/%E4%BB%A3%E7%A0%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="代码版本管理解决的问题以及为什么使用"><a class="markdownIt-Anchor" href="#代码版本管理解决的问题以及为什么使用"></a> 代码版本管理解决的问题以及为什么使用？</h2>
<ol>
<li>多人协作开发的时候使用代码版本管理进行代码共享</li>
<li>对每天的开发任务做一个缓存(保存)</li>
<li>每做好一个功能之后都可以进行一个缓存，需要回退时可以根据提交记录进行回退</li>
</ol>
<h2 id="gitsvn"><a class="markdownIt-Anchor" href="#gitsvn"></a> git/svn</h2>
<p>git 是一个分布式的代码版本管理工具,每一个人的本地代码都可以分享成为一个代码仓库，供别人使用。可以非常方便的实现离线开发。</p>
<p>svn 是一个集中式的代码版本管理工具，需要一个中心代码仓库。</p>
<h2 id="常见的-git-服务器有哪些"><a class="markdownIt-Anchor" href="#常见的-git-服务器有哪些"></a> 常见的 git 服务器有哪些？</h2>
<p>github，码云，阿里云代码仓库，gitlab</p>
<h2 id="svn-管理工具-visualsvn"><a class="markdownIt-Anchor" href="#svn-管理工具-visualsvn"></a> svn 管理工具 visualSvn</h2>
<h2 id="常见的-git-命令都有哪些"><a class="markdownIt-Anchor" href="#常见的-git-命令都有哪些"></a> 常见的 git 命令都有哪些？</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . <span class="comment"># 把修改的文件加入缓存区</span></span><br><span class="line">git commit -m <span class="string">&#x27;提交信息&#x27;</span> <span class="comment"># 提交代码到本地仓库</span></span><br><span class="line">git push origin master:master <span class="comment"># 提交本地的master分支到远程仓库origin中的master分支</span></span><br><span class="line"></span><br><span class="line">git pull origin master:master <span class="comment"># 拉取</span></span><br><span class="line"></span><br><span class="line">git remote -v <span class="comment"># 查看远程分支信息</span></span><br><span class="line">git remote add 仓库名 地址 <span class="comment"># 添加远程仓库</span></span><br><span class="line">git status <span class="comment"># 查看当前仓库的状态信息</span></span><br><span class="line">git checkout 分支名 <span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b 分支名 <span class="comment"># 切换分支，不存在的时候创建</span></span><br><span class="line">git branch 分支名 <span class="comment"># 创建分支</span></span><br><span class="line">git <span class="built_in">clone</span> 远程仓库地址 <span class="comment"># clone远程仓库到本地</span></span><br></pre></td></tr></table></figure>
<p>.gitignore 过滤掉不需要提交到代码仓库的文件</p>
<h2 id="常用的-gui-工具"><a class="markdownIt-Anchor" href="#常用的-gui-工具"></a> 常用的 GUI 工具</h2>
<ol>
<li>svn/git 小乌龟</li>
<li>SourceTree git</li>
<li>github desktop</li>
</ol>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>伪类元素加字体图标的使用</title>
    <url>/2020/05/07/%E4%BC%AA%E7%B1%BB%E5%85%83%E7%B4%A0%E5%8A%A0%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="伪类元素加字体图标的使用"><a class="markdownIt-Anchor" href="#伪类元素加字体图标的使用"></a> 伪类元素加字体图标的使用</h2>
<ul>
<li>先在阿里图标库下载文件到本地</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2019/12/24/15LWixb6M38tKzw.png"
                      alt="image" 
                ></p>
<ul>
<li>找到.ttf文件放到项目中</li>
</ul>
<h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2019/12/24/mIXBeL1Vx7guTDj.png"
                      alt="image" 
                ></p>
<ul>
<li>这里需要注意 图标名称是Unicode名称</li>
<li></li>
</ul>
<h2 id="在pagejson中使用字体图标"><a class="markdownIt-Anchor" href="#在pagejson中使用字体图标"></a> 在page.json中使用字体图标</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/03/30/QNyzrDuMa8Ik9FC.png"
                      alt="image" 
                ></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="string">&quot;app-plus&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;titleNView&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;titleText&quot;</span>:<span class="string">&quot;我的收入&quot;</span>,</span><br><span class="line">        <span class="string">&quot;backgroundColor&quot;</span>:<span class="string">&quot;#030313&quot;</span>,</span><br><span class="line">        <span class="string">&quot;titleColor&quot;</span>:<span class="string">&quot;#FFE001&quot;</span>,</span><br><span class="line">        <span class="string">&quot;buttons&quot;</span>:[</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 需要在图标名称前加&#x27;\u&#x27;</span></span><br><span class="line">            <span class="string">&quot;text&quot;</span>: <span class="string">&quot;全部门店\ue6b2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fontSize&quot;</span>:<span class="string">&quot;28rpx&quot;</span>,</span><br><span class="line">            <span class="comment">// 引入字体文件</span></span><br><span class="line">            <span class="string">&quot;fontSrc&quot;</span>:<span class="string">&quot;/static/font/iconfont.ttf&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>字体图标</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Go搭建一个WEB服务</title>
    <url>/2020/07/10/%E4%BD%BF%E7%94%A8Go%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAWEB%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<blockquote>
<p>使用Go搭建服务比较方便，引入net/http即可</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;net/http&quot;</span></span><br><span class="line">  <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data  定义一个数据结构</span></span><br><span class="line"><span class="keyword">type</span> Data <span class="keyword">struct</span>&#123;</span><br><span class="line">	Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Age <span class="type">int</span>  <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">	Sex <span class="type">bool</span>  <span class="string">`json:&quot;sex&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testApi</span><span class="params">(w http.ResponseWriter, r *Request)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始一个json数据 </span></span><br><span class="line">    data := Data&#123;</span><br><span class="line">		Name:<span class="string">&quot;sonderss&quot;</span>,</span><br><span class="line">		Age:<span class="number">24</span>,</span><br><span class="line">		Sex:<span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	r.ParseForm() <span class="comment">// 解析参数</span></span><br><span class="line"></span><br><span class="line">	jsonStu, _ := json.Marshal(data)  <span class="comment">// 将数据转为json对象格式</span></span><br><span class="line"></span><br><span class="line">	w.Write(jsonStu)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义url调用对应的业务接口</span></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>,testApi)</span><br><span class="line">    <span class="comment">// 监听端口</span></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8005&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>GO</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用MongoDB</title>
    <url>/2020/05/20/%E4%BD%BF%E7%94%A8MongoDB/</url>
    <content><![CDATA[<h4 id="使用mongodb数据库"><a class="markdownIt-Anchor" href="#使用mongodb数据库"></a> 使用mongodb数据库</h4>
<ul>
<li>安装</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install --save @nestjs/mongoose mongoose</span><br></pre></td></tr></table></figure>
<ul>
<li>在app.module.ts中连接数据库</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MongooseModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class="line">@<span class="title class_">Module</span>(&#123;</span><br><span class="line">  <span class="comment">// blob本地数据库名</span></span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">MongooseModule</span>.<span class="title function_">forRoot</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/blob&#x27;</span>,&#123; useNewUrlParser : <span class="literal">true</span> &#125;)]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>article.module.ts使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MongooseModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ArticleSchema</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../schemas/article.schema&#x27;</span>;</span><br><span class="line">@<span class="title class_">Module</span>(&#123;</span><br><span class="line">    <span class="comment">// collection 如果不填则以Article建立一张表</span></span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">MongooseModule</span>.<span class="title function_">forFeature</span>([&#123; <span class="attr">name</span>: <span class="string">&#x27;Article&#x27;</span>, <span class="attr">schema</span>: <span class="title class_">ArticleSchema</span>,<span class="attr">collection</span>:<span class="string">&quot;article&quot;</span> &#125;])]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ArticleModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置Schema</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mongoose <span class="keyword">from</span> <span class="string">&#x27;mongoose&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ArticleSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">keywords</span>:<span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="title class_">String</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>业务逻辑service</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Model</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;mongoose&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InjectModel</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/mongoose&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreatePostDTO</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-post.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Article</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./article.interface&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NewsService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">@InjectModel(<span class="string">&#x27;Article&#x27;</span>) private readonly articleModel: Model&lt;Article&gt;</span>) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getPosts</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">Article</span>[]&gt; &#123;</span><br><span class="line">        <span class="comment">// .sort(&#123;_id:-1&#125;) 倒序</span></span><br><span class="line">        <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">articleModel</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(&#123;<span class="attr">_id</span>:-<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> posts;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getPost</span>(postID): <span class="title class_">Promise</span>&lt;<span class="title class_">Article</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> post = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">articleModel</span></span><br><span class="line">            .<span class="title function_">findById</span>(postID)</span><br><span class="line">            .<span class="title function_">exec</span>();</span><br><span class="line">        <span class="keyword">return</span> post;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<ul>
<li>控制器定义api接口</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">UseGuards</span>, <span class="title class_">Body</span>, <span class="title class_">Get</span>, <span class="title class_">HttpStatus</span>, <span class="title class_">Res</span>, <span class="title class_">Query</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ArticleService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./article.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreatePostDTO</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-post.dto&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Controller</span>(<span class="string">&#x27;article&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"> private readonly  ariticleService: ArticleService</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有文章</span></span><br><span class="line">    @<span class="title class_">Get</span>(<span class="string">&#x27;getArticles&#x27;</span>)</span><br><span class="line">    <span class="comment">// @UseGuards(AuthGuard(&#x27;jwt&#x27;))</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getPosts</span>(<span class="params">@Res() res</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ariticleService</span>.<span class="title function_">getPosts</span>();</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>).<span class="title function_">json</span>(posts);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加文章</span></span><br><span class="line">    @<span class="title class_">Post</span>(<span class="string">&#x27;addArticle&#x27;</span>)</span><br><span class="line">    <span class="comment">// token验证</span></span><br><span class="line">    @<span class="title class_">UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&#x27;jwt&#x27;</span>))</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">addArticle</span>(<span class="params">@Res() res, @Body() createPostDTO: CreatePostDTO</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> newPost  = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">ariticleService</span>.<span class="title function_">addPost</span>(createPostDTO);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;添加成功!!!&quot;</span>,</span><br><span class="line">            <span class="attr">status</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="attr">data</span>: newPost</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://localhost:3001/article/getArticles</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nest</category>
      </categories>
      <tags>
        <tag>Nest</tag>
      </tags>
  </entry>
  <entry>
    <title>使用花生壳内网穿透</title>
    <url>/2020/06/08/%E4%BD%BF%E7%94%A8%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h3 id="花生壳内网穿透"><a class="markdownIt-Anchor" href="#花生壳内网穿透"></a> 花生壳内网穿透</h3>
<p>摸索了两个小时，终于可以把博客内网穿透映射到外网了，开心。</p>
<hr />
<ul>
<li>花生壳  <a class="link"   href="https://b.oray.com/domain/" >https://b.oray.com/domain/<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/06/08/qhLlygVYNojxaPs.png"
                      alt="image" 
                ></p>
<ul>
<li>使用方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内网穿透：创建一个项目，名称 -》 端口 -》 域名 -》 确认</span><br></pre></td></tr></table></figure>
<h5 id="遇到的一个坑"><a class="markdownIt-Anchor" href="#遇到的一个坑"></a> 遇到的一个坑</h5>
<p><strong>域名IP地址</strong>指向 0.0.0.0</p>
<p>这个问题搞了半天，不知道怎么回事，然后突然就好了（它自己就好了），在我得到了一个免费的域名时，再次出现该问题，猜想是缓存的问题，于是修改了DNS缓存为<strong>223.5.5.5</strong>立即解决了该问题。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统01</title>
    <url>/2022/09/24/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F01/</url>
    <content><![CDATA[<h4 id="信号分类"><a class="markdownIt-Anchor" href="#信号分类"></a> 信号分类</h4>
<table>
<thead>
<tr>
<th style="text-align:center">确定信号</th>
<th style="text-align:center">随机信号</th>
<th style="text-align:center">连续信号</th>
<th style="text-align:left">离散信号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">可用确定时间函数表示的信号</td>
<td style="text-align:center">不能用确定的函数描述，只有统计特性</td>
<td style="text-align:center">连续范围内有定义的信号</td>
<td style="text-align:left">只在离散的瞬间才有定义</td>
</tr>
</tbody>
</table>
<h5 id="周期与非周期"><a class="markdownIt-Anchor" href="#周期与非周期"></a> 周期与非周期</h5>
<blockquote>
<p>周期信号: 是定义在（-<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">∞</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">∞</span></span></span></span>）区间，每隔一定时间按相同规律重复变化的信号</p>
</blockquote>
<blockquote>
<p>非周期信号: 没有在一定时间按照相同规律重复变化的信号</p>
</blockquote>
<p>例：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>t</mi><mo>+</mo><mi>m</mi><mi>T</mi><mo>)</mo><mo separator="true">,</mo><mi>m</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mo>±</mo><mn>1</mn><mo separator="true">,</mo><mo>±</mo><mn>2</mn><mo separator="true">,</mo><mo>±</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">f(t)=f(t+mT), m=0, \pm1, \pm2,  \pm3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mbin">+</span><span class="mord mathit">m</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mord mathit">m</span><span class="mrel">=</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord">±</span><span class="mord mathrm">1</span><span class="mpunct">,</span><span class="mord">±</span><span class="mord mathrm">2</span><span class="mpunct">,</span><span class="mord">±</span><span class="mord mathrm">3</span></span></span></span></p>
<h5 id="能量信号和功率信号"><a class="markdownIt-Anchor" href="#能量信号和功率信号"></a> 能量信号和功率信号</h5>
<p>将信号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span>施加在1Ω电阻上，它所消耗的瞬时功率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">|f(t)|^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathrm">∣</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></p>
<blockquote>
<p>能量信号：能量有限<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">0&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mrel">&lt;</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">E</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.5391em;"></span><span class="strut bottom" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mrel">&lt;</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">∞</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">P=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span>，功率为0</p>
</blockquote>
<blockquote>
<p>功率信号：功率有限<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">0 &lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">0</span><span class="mrel">&lt;</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.5391em;"></span><span class="strut bottom" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="base textstyle uncramped"><span class="mrel">&lt;</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">∞</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">E=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="mrel">=</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">∞</span></span></span></span> 的信号</p>
</blockquote>
<h5 id="因果信号和非因果信号"><a class="markdownIt-Anchor" href="#因果信号和非因果信号"></a> 因果信号和非因果信号</h5>
<blockquote>
<p>因果信号：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>≥</mo><mn>0</mn><mo separator="true">,</mo><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">t \geq  0, f(t)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span><span class="mrel">≥</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span>的信号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">t=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.64444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span>时接入的信号，例如阶跃信号</p>
</blockquote>
<blockquote>
<p>非因果信号：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>&lt;</mo><mn>0</mn><mo separator="true">,</mo><mi>f</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">t&lt;0,f(t)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">t</span><span class="mrel">&lt;</span><span class="mord mathrm">0</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span>的信号，（除0信号外）</p>
</blockquote>
]]></content>
      <categories>
        <category>信号与系统</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>像个孩子</title>
    <url>/2021/03/31/%E5%83%8F%E4%B8%AA%E5%AD%A9%E5%AD%90/</url>
    <content><![CDATA[<p>汪峰的歌好听。<br ><br />
像个孩子<br><br />
为什么记忆那么清楚<br><br />
为什么</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>深夜</tag>
      </tags>
  </entry>
  <entry>
    <title>关于切片</title>
    <url>/2020/07/20/%E5%85%B3%E4%BA%8E%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<blockquote>
<p>刚开始看到切片时，还真不知道是什么，了解以后，原来就是对数组的一层封装，因为在Go里，数组是有局限性的，切片的话就很灵活了。</p>
</blockquote>
<p>废话少说，直接贴代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> a = <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		a = <span class="built_in">append</span>(a, fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, i))</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请使用内置的sort包对数组var a = [...]int&#123;3, 7, 8, 9, 1&#125;进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = [...]<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>&#125;</span><br><span class="line">	sort.Ints(a[:])</span><br><span class="line">	fmt.Println(a) <span class="comment">// [1 3 7 8 9]</span></span><br><span class="line">	<span class="comment">// 降序排序</span></span><br><span class="line">	sort.Sort(sort.Reverse(sort.IntSlice(a[:])))</span><br><span class="line">	fmt.Println(a) <span class="comment">// [9 8 7 3 1]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 定义一个切片并初始化</span></span><br><span class="line">	a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	<span class="comment">// 追加元素</span></span><br><span class="line">	a = <span class="built_in">append</span>(a, <span class="number">4</span>)</span><br><span class="line">	<span class="comment">// 追加另一个切片</span></span><br><span class="line">	<span class="keyword">var</span> b = []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">	a = <span class="built_in">append</span>(a, b...) <span class="comment">// [1 2 3 4 5 6 7]</span></span><br><span class="line">	fmt.Println(a)</span><br><span class="line">	<span class="comment">// 删除切片的某项</span></span><br><span class="line">	a = <span class="built_in">append</span>(a[:<span class="number">1</span>], a[<span class="number">2</span>:]...) <span class="comment">// [1 3 4 5 6 7]</span></span><br><span class="line">	fmt.Println(a)</span><br><span class="line">	<span class="comment">// 遍历切片</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">		fmt.Println(i, a[i])</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 条件判断</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">	<span class="keyword">if</span> a[<span class="number">4</span>] == <span class="number">6</span> &#123;</span><br><span class="line">		c = a[<span class="number">4</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(c) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 直接赋值给另一个切片</span></span><br><span class="line">	d := a</span><br><span class="line">	fmt.Println(d) <span class="comment">// [1 3 4 5 6 7]</span></span><br><span class="line">	<span class="comment">// 修改D的某项</span></span><br><span class="line">	d[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">	fmt.Println(d, a) <span class="comment">//  [1 2 4 5 6 7] [1 2 4 5 6 7]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 深拷贝 copy()</span></span><br><span class="line">	e := []<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">	<span class="built_in">copy</span>(e, a)</span><br><span class="line">	fmt.Println(e)</span><br><span class="line">	e[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">	fmt.Println(e, a) <span class="comment">// [5 2] [1 2 4 5 6 7]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 深拷贝  4 -》 长度 6 -》 容量</span></span><br><span class="line">	f := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line">	<span class="built_in">copy</span>(f, a)</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">	fmt.Println(f, a) <span class="comment">// [5 2 4 5] [1 2 4 5 6 7]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 小试牛刀</span></span><br><span class="line">	test1() <span class="comment">//[     0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">	test2() <span class="comment">// [1 3 7 8 9]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>切片</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭某个端口号</title>
    <url>/2020/11/11/%E5%85%B3%E9%97%AD%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E5%8F%B7/</url>
    <content><![CDATA[<blockquote>
<p>有时候不知什么时候就关闭了服务窗口，但进程还是在的，于是想要通过命令行来关闭某个端口号</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看进程 </span></span><br><span class="line">netstat -ano|findstr <span class="string">&quot;8080&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据进程关闭该端口</span></span><br><span class="line">taskkill /f /pid <span class="number">35768</span> /t</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>端口号</tag>
        <tag>强制关闭</tag>
      </tags>
  </entry>
  <entry>
    <title>写在24岁的生日</title>
    <url>/2020/08/04/%E5%86%99%E5%9C%A824%E5%B2%81%E7%9A%84%E7%94%9F%E6%97%A5/</url>
    <content><![CDATA[<p>时间过的太快，又是半年过去。<br /><br />
可能本文多了些说教，不过是对过往的自己诉说。我多么希望年少的自己能与我再见一场。在一个夏天，那个少年从不担心未来如何，也不用担心归往何处，只需要玩到饭时回家，在门口抱着大狗说话。<br /><br />
18年的时候，我去了上海，找了份工作，谁知第一天上班就因事请了假。在周日回上海13个小时的火车上，我昏昏欲睡一路，天空也下了一路的雨，到上海的时候，已是第二天下午，天空仿佛又出了太阳。但暗自发誓再也不坐火车了。<br /><br />
回上海之后开始了再也停不下来的路程，当时为了转移注意力去做点别的事情，我开通了公众号，天空之外，时至今日，公众号已有80余篇，虽然有时候看以前发过的文章，很是难堪，但想来想去也是没删，反正也没人看，就在那里吃灰吧。<br /><br />
2018年8月在上海闵行与松江交界的xxx公寓451房间里，我算了一笔账，大概是毕业前后找工作租房子加基本生活共欠下了6000千元，我把未来三个月的还钱计划写在一张纸上，并告诫自己无论如何都要按时还完，且精确到时分秒上（ATM转账），因为我觉得社会生涯才刚刚开始而已，虽然很难，但不能不诚信。于是，接下来几个月的工资到账就用来还钱了，只留够生活费，就这样我在计划内还清了钱。那一天晚上我买来酒喝了个痛快。<br /><br />
其实从学校出来后，就知道了社会的残酷，社会的毒打，只是遗憾的是没时间留给我去证明了。而很多个时候我都会想假如我年少有为，我是否也可以成为一个幸福的人。<br /></p>
<h4 id="自己"><a class="markdownIt-Anchor" href="#自己"></a> 自己</h4>
<p>假如五年前的自己能看到这些，又会是怎么样的路程，我想最起码会容易一点吧，谁知道呢，没有人可以改变过去，所以才要改变当下。<br /></p>
<h4 id="身体"><a class="markdownIt-Anchor" href="#身体"></a> 身体</h4>
<p>大概四年前吧，我立下目标想要长二十斤，可如今依然没有实现，戒了烟喝高脂奶粉吃不爱吃的鸡蛋，可重量没有变化，但这一年还有时间，我想到年底应该会长胖一二吧。</p>
<h4 id="游戏"><a class="markdownIt-Anchor" href="#游戏"></a> 游戏</h4>
<p>上学时的我是一个网瘾少年，我沉醉于游戏的反馈机制，我太爱一场场的战斗了，只打排位赛的我总是很在乎输赢，输了气急败坏，赢了就准备下一场，偶尔指挥全场，经常带节奏团战。春峰说我不是玩游戏，而是被游戏玩，我说我只想赢。<br /><br />
作为一个打野，我只玩盲僧，玩了千场，状态好的时候被称瞎哥，状态差的时候被叫这瞎子，都习惯了，我想赢，中间夹杂着一点点想秀。<br /><br />
后来毕业了，我还是没拿到钻石框，更为打击的是，我看到了我的天花板，白金一。与此同时，落得个网瘾少年的自嘲称号。没有什么寒暄，我背着书包拖着行李箱离开学校。<br /><br />
我常常为这个时期的我感到惭愧。<br /></p>
<h4 id="朋友"><a class="markdownIt-Anchor" href="#朋友"></a> 朋友</h4>
<p>虽然我早在上学时就习惯了独行，但这两年来，能自己挺过所有难熬的夜，还是很感慨。就像离开学校那天，我从宿舍出来，走在没有人的过道，就知道了这一路会是什么样。当发现与往日朋友话不投机半句多的时候，其实早就走远了，祝好。说到这里，还是感谢春峰与我喝的几次小酒，虽然我知道咱们喝酒的机会也可能会越来越少。我依然愿意帮助别人，只是不想再寻求别人的帮助了。<br /></p>
<h4 id="年龄"><a class="markdownIt-Anchor" href="#年龄"></a> 年龄</h4>
<p>年龄已经很大了，骨子里又是传统的人，所以很多时候，我都在想我什么时候可以安定下来，至少不用在没有归属感的城市租房住。留不住一线，回不去故乡，这几年要更努力才是。</p>
<h4 id="精神"><a class="markdownIt-Anchor" href="#精神"></a> 精神</h4>
<p>在毕业之初，便遭受社会毒打，以及找工作的各种不顺，嘲讽，但这些终究没有击垮我，反而觉得推着我走了一段。</p>
<p>在上学时为游戏角色取名sonders，没想到却成了我的个人博客<a class="link"   href="http://sonderss.qicp.vip/blob/%EF%BC%8Cgithub%E5%9C%B0%E5%9D%80%E4%BB%A5%E5%8F%8A%E8%AE%BA%E5%9D%9B%E7%9A%84%E5%90%8D%E7%A7%B0%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%83%B3%E6%83%B3%E8%BF%98%E7%9C%9F%E6%98%AF%E6%9C%89%E6%84%8F%E6%80%9D%E3%80%82" >http://sonderss.qicp.vip/blob/，github地址以及论坛的名称，现在想想还真是有意思。<i class="fas fa-external-link-alt"></i></a></p>
<p>24总让我想起科比。在我中学时期正赶上24号与家嫂的湖人对战绿军，那个时候在我的记忆里，是中午放学后，阳光透过玻璃洒进里屋，我坐立不安看着最后一节的最后几分钟，看着科比持球笑容满面与队友拥抱，看着紫金王朝的再次夺冠。<br /><br />
在我第一次当众演讲的时候我选择了我的偶像科比布莱恩特，教会我不放弃不怕困难的去坚持去证明自己。<br /><br />
可是有一天，在我还没睡醒的时候，微信传来科比坠机的信息，我不知如何形容我的心情，而时至今日我都没觉得悲伤。<br /></p>
<h4 id="期望"><a class="markdownIt-Anchor" href="#期望"></a> 期望</h4>
<p>静下心来，回想这两年发生过的事情，觉得感慨，其实人生是有一条看不见的线的，它可能叫生命之线吧，正如那句命里有时终须有，命里无时莫强求，但人生路太过漫长，做着实事去充实点总是好的。而前方的路还有很长，面临着选择，选择意味着挑战和风险，一切不过是刚刚开始，继续加油吧。<br /></p>
<!--我开始了自学之路，每天下了班回来看视频，看文档，一个字母一个字母的敲打，当时电脑对我而言，除了打游戏熟练，其他却一无所知，在背着6000块钱外债的压力下，我却变的快乐起来。<br />-->
<!--在熬夜刷题的无数个夜里，最让我遗憾的是我总是第二名，无论我如何追赶，在深夜大概一点的时候，那个排行榜上我永远是第二，但我也觉得很好，因为这代表着总有人比我更努力，还要加油才是。<br />-->
<!--纵使如此，进步依然很慢，因为半路出家没有天赋而想要做成一件事真的太难了，很多个夜晚我都不知该如何坚持下去。现在再回想那段时光，也不过如此了。<br />-->]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>刀锋</title>
    <url>/2022/11/28/%E5%88%80%E9%94%8B/</url>
    <content><![CDATA[<blockquote>
<p>看完了毛姆的《刀锋》，似乎有了些新的感悟</p>
</blockquote>
<p>因为不喜欢看译文，于是前半部分看的比较敷衍一目十行，但是毛姆写得太好了，引人入胜于是看得津津有味。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>初探Jest</title>
    <url>/2020/05/18/%E5%88%9D%E6%8E%A2Jest/</url>
    <content><![CDATA[<h4 id="安装使用"><a class="markdownIt-Anchor" href="#安装使用"></a> 安装使用</h4>
<ul>
<li>node环境</li>
<li>安装jest</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化一个package.js</span></span><br><span class="line">npm  init </span><br><span class="line"><span class="comment">// 只在开发环境使用 -》  -D</span></span><br><span class="line">npm install jest -D </span><br></pre></td></tr></table></figure>
<h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4>
<blockquote>
<p>需要建立与被测文件名相同的测试文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">|目录</span><br><span class="line">|----- index.<span class="property">js</span></span><br><span class="line">|----- index.<span class="property">test</span>.<span class="property">js</span></span><br></pre></td></tr></table></figure>
<ul>
<li>index.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被测文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exports.abc = abc</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">    abc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>index.test.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试文件</span></span><br><span class="line"><span class="comment">// 这里使用node的模块系统  exports/model.exports</span></span><br><span class="line"><span class="keyword">const</span> &#123;abc&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./index.js&#x27;</span>)</span><br><span class="line"><span class="comment">// jest测试框架的测试语法</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试abc函数功能&#x27;</span>,<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">abc</span>(<span class="number">1</span>,<span class="number">2</span>)).<span class="title function_">toBe</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="运行测试"><a class="markdownIt-Anchor" href="#运行测试"></a> 运行测试</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm run test</span><br><span class="line"></span><br><span class="line">&gt; jest_demo@<span class="number">1.0</span><span class="number">.0</span> test <span class="attr">E</span>:\study\jest</span><br><span class="line">&gt; jest</span><br><span class="line"></span><br><span class="line"> <span class="variable constant_">PASS</span>  ./01_.<span class="property">test</span>.<span class="property">js</span></span><br><span class="line">  √ 测试加法 (5ms)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Test</span> <span class="title class_">Suites</span>: <span class="number">1</span> passed, <span class="number">1</span> total</span><br><span class="line"><span class="title class_">Tests</span>:       <span class="number">1</span> passed, <span class="number">1</span> total</span><br><span class="line"><span class="title class_">Snapshots</span>:   <span class="number">0</span> total</span><br><span class="line"><span class="title class_">Time</span>:        <span class="number">3.</span>97s</span><br><span class="line"><span class="title class_">Ran</span> all test suites.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Jest</category>
      </categories>
      <tags>
        <tag>Jest</tag>
      </tags>
  </entry>
  <entry>
    <title>博客情怀</title>
    <url>/2022/08/11/%E5%8D%9A%E5%AE%A2%E6%83%85%E6%80%80/</url>
    <content><![CDATA[<blockquote>
<p>可能每个人都想有一个属于自己的博客</p>
</blockquote>
<h4 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h4>
<p>使用Hexo搭建博客，优点是主题选择多，非常的简单快速，部署到Github上即可访问.<br />
最早我使用的是Next主题，但只发了一篇文章就仍在一边吃灰了.</p>
<h4 id="花生壳内网穿透"><a class="markdownIt-Anchor" href="#花生壳内网穿透"></a> 花生壳内网穿透</h4>
<p>因为一直想自己前端后端一把梭，于是决定从博客入手，设计风格参考了技术胖(B站UP主)的博客设计。<br />
前后端分离：<br />
前端使用的是React+Antd+TS来搭建的，包括博客后台管理系统<br />
后端使用的是NestJS+MongoDB来搭建的，写接口服务给前端使用</p>
<p>这好像是第一次尝试写后端接口，还是很有成就感的。</p>
<p>博客可以跑起来以后，只是在本地运行的，没有服务器部署，于是用了内网穿透来让外网访问。<br />
当时博客本地运行在公司的电脑上…</p>
<h4 id="迁移"><a class="markdownIt-Anchor" href="#迁移"></a> 迁移</h4>
<p>21年初买了一个云服务器, 又买了域名、备案，然后把博客项目迁移到云服务器上运行，这次再也不用内网穿透了。<br />
博客访问地址:  <a class="link"   href="https://sonders.cn" >https://sonders.cn<i class="fas fa-external-link-alt"></i></a><br />
等云服务器到期后，如不续费，大概就停了。</p>
<h4 id="回归hexo"><a class="markdownIt-Anchor" href="#回归hexo"></a> 回归Hexo</h4>
<p>使用云服务器虽然更好，但是费用也不算低，利用率不算特别高，但是部署在Github上的话，不出意外应该是千年不变的…<br />
所以还是决定重新整一个Hexo博客出来，这次选择了Keep主题<br />
相比较于最开始Hexo博客，这次新增了不少功能：</p>
<ul>
<li>评论</li>
<li>自动化部署</li>
<li>字数统计</li>
<li>首次打开的礼花特效</li>
<li>搜索</li>
<li>根据字数显示的“小杯，中杯，大杯”</li>
</ul>
<p>由此可见，最初搭建的Hexo博客确实非常简陋，那时看不懂代码…</p>
<h4 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h4>
<p>虽然是新瓶装旧酒，但这次也自定义了一些新功能，之后有好的点子也会提现在博客上。</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>博客自动化部署</title>
    <url>/2022/09/24/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<blockquote>
<p>使用Github自动化部署</p>
</blockquote>
<p>参考文章: <a class="link"   href="https://juejin.cn/post/6943895271751286821" >https://juejin.cn/post/6943895271751286821<i class="fas fa-external-link-alt"></i></a></p>
<p>配置步骤</p>
<ol>
<li>生成令牌 <a class="link"   href="https://github.com/settings/tokens" >https://github.com/settings/tokens<i class="fas fa-external-link-alt"></i></a></li>
<li>在博客的仓库地址 <a class="link"   href="https://github.com/xxx/xxxBlob/settings/secrets/actions" >https://github.com/xxx/xxxBlob/settings/secrets/actions<i class="fas fa-external-link-alt"></i></a> 中新增/更新刚刚生成的令牌（该令牌可设置过期时间）</li>
<li>在hexo博客项目中找到.github =&gt; workflows =&gt;  hexo-deploy.yml</li>
</ol>
<p>注意：生成的令牌如果失效，那么push到分支后，将会打包失败，此时只需在第一步中找到该令牌，update之后，将新令牌也更新到第二步对应的secrets/actions即可</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploying</span> <span class="string">Hexo</span> <span class="string">project</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># master 分支有 push 行为时就触发这个 action 我这里改成了我分支名称 main</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@main</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">theme-keep/hexo-deploy-github-pages-action@master</span> <span class="comment"># 使用专门部署 Hexo 到 GitHub pages 的 action</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY</span> <span class="string">&#125;&#125;</span> <span class="comment"># secret 名 这个填写第二步新增时那个名称</span></span><br><span class="line">          <span class="attr">PUBLISH_REPOSITORY:</span> <span class="string">sonderss/xxx</span>  <span class="comment"># 公共仓库，格式：GitHub 用户名/仓库名 这里就是博客静态文件所在仓库地址</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span> <span class="comment"># 分支，填 gh-pages 就行</span></span><br><span class="line">          <span class="attr">PUBLISH_DIR:</span> <span class="string">./public</span> <span class="comment"># 部署 public 目录下的文件</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>周一的早上</title>
    <url>/2021/03/29/%E5%91%A8%E4%B8%80%E7%9A%84%E6%97%A9%E4%B8%8A/</url>
    <content><![CDATA[<p>刚来到公司，吃过早饭。<br />
千万别想不开。<br />
过一天是一天，及时行乐吧。</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>做梦</tag>
        <tag>早上</tag>
      </tags>
  </entry>
  <entry>
    <title>周末一次运动</title>
    <url>/2022/11/06/%E5%91%A8%E6%9C%AB%E4%B8%80%E6%AC%A1%E8%BF%90%E5%8A%A8/</url>
    <content><![CDATA[<blockquote>
<p>周末去了附近羽毛球馆打球，非常放松和愉悦的一次运动</p>
</blockquote>
<p>平时周末基本都是在屋里看电影或者看《生活大爆炸》，觉得这样浪费一个周末挺没劲的，再加上之前同事喊了几次去打球我都拒绝了，这周决定一起去玩一次。<br />
地点：<code>附近某羽毛球馆</code><br />
下午13点的时候收拾一下出门，导航显示骑行比坐地铁公交要快3倍，于是用支付宝扫了一辆小蓝车，出发~过完两个和红绿灯后，发现前方在修路，心想难道要绕路吗，往前一走，发现是有路的，只是要过一个天桥，于是推车上临时搭建的步行梯，就这样慢慢上了桥面，下桥的时候想着省事，就紧握刹车，慢慢推进，最后3、4米时享受往下冲刺的速度感，虽然这个速度是安全范围内可控的速度，但还是比较快的——根据我以安全为主的人生观而言。<br />
我提前到场了。在路边摘了口罩，看着路上来往的人和车，地上的落叶，两旁的树，真是好看，这才是生活啊~~<br />
有的是家长带着小朋友来玩，有的是成群结队而来，整个球馆充满了活力。<br />
因为很久没打羽毛球，而且是这种标准的场地，开头有些不适应，但是运动起来之后，非常有感觉，非常有精神，运动的感觉我太喜欢了，尤其是竞技场上的运动。<br />
打了两个小时，满身大汗，骑着小蓝车回去冲澡，有风，但阳光很好。<br />
洗澡的时候想之后天气好的话要骑着自行车多出去转一转。<br />
最近也在看运动相机，想着骑行的时候可以记录沿途的风景，可是运动相机一是画质不太好而且比较贵，暂没做出决定~<br />
坦白说，我喜欢我目前的生活，不再浑浑噩噩，不再顾影自怜，不再遗憾往事，而是想着到处旅游，多看书，丰富自己的内心世界，建立自己积极向上的一面，其实我觉得我本身就是一个乐观主义者，刚毕业时有些蠢拎不清什么是好什么是坏，可我还是相信未来的自己会变好，幸运的是找到了自己热爱的工作，还算可以。<br />
对自己的要求大概就是少犯蠢，与人向善，提高自己，开心一点。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>周末的上午</title>
    <url>/2021/03/27/%E5%91%A8%E6%9C%AB%E7%9A%84%E4%B8%8A%E5%8D%88/</url>
    <content><![CDATA[<p>醒来又睡去，做了几个梦<br />
年轻时多么无知，一转眼就过去</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>梦</tag>
        <tag>无奈</tag>
      </tags>
  </entry>
  <entry>
    <title>图床上传</title>
    <url>/2022/11/29/%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<blockquote>
<p>由于业务需要用到图床上传于是找到了一个比较好用的图床，<a class="link"   href="https://imgbb.com/" >https://imgbb.com/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>这里仅记录通过API上传</p>
<ol>
<li>通过邮箱注册账号</li>
<li>注册完以后参考文档 <a class="link"   href="https://api.imgbb.com/" >https://api.imgbb.com/<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<p>先获取key: 6f76b23f17axxxxxxxxxx</p>
<p>上传图片接口: <a class="link"   href="https://api.imgbb.com/1/upload" >https://api.imgbb.com/1/upload<i class="fas fa-external-link-alt"></i></a></p>
<p>有四个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 你申请到的key</span></span><br><span class="line">    <span class="attr">image</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 所要上传的图片 可以是base64 也可以是一个url  也可以是binary file</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 图片名称 该名称是访问外链的图片名称 同名将覆盖</span></span><br><span class="line">    <span class="attr">expiration</span>: <span class="number">60</span> <span class="comment">// 过期时间， 60-15552000 单位：秒数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里例子是使用如果是在云函数中调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;6f76b23f17axxxxxxxxxx&#x27;</span></span><br><span class="line"><span class="keyword">const</span> baseUrl =  <span class="string">`https://api.imgbb.com/1/upload?key=<span class="subst">$&#123;key&#125;</span>`</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> uniCloud.<span class="property">httpclient</span>.<span class="title function_">request</span>(baseUrl, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">dataAsQueryString</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">key</span>: key,</span><br><span class="line">        <span class="attr">image</span>: event.<span class="property">base64</span>,  <span class="comment">// 如果是base64 必须使用 post</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;60s1&#x27;</span>,</span><br><span class="line">        <span class="attr">expiration</span>: <span class="number">600</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span> <span class="comment">// 否则不会将base64上传</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">30</span>*<span class="number">1000</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>返回的结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回的结果</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2ndCYJK&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1f64245afb2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url_viewer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ibb.co/2ndCYJK&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.ibb.co/w04Prt6/c1f64245afb2.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;display_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.ibb.co/98W13PY/c1f64245afb2.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;42&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1552042565&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expiration&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1f64245afb2.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1f64245afb2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extension&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.ibb.co/w04Prt6/c1f64245afb2.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;thumb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1f64245afb2.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1f64245afb2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extension&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.ibb.co/2ndCYJK/c1f64245afb2.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;medium&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1f64245afb2.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c1f64245afb2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extension&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.ibb.co/98W13PY/c1f64245afb2.gif&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;delete_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://ibb.co/2ndCYJK/670a7e48ddcb85ac340c717a41047e5c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>好像生病了</title>
    <url>/2021/04/29/%E5%A5%BD%E5%83%8F%E7%94%9F%E7%97%85%E4%BA%86/</url>
    <content><![CDATA[<p>从三月份不知道哪天开始，总是陷入对过去的沉思中，甚至能想起过去好几年前说某句话的语气，甚至以第三视角审视着当时那个空间的我，然后开始崩溃，吃饭时崩溃强忍住眼泪，走路时崩溃强忍住眼泪，地铁上崩溃强忍住眼泪，回去后关上门开始失声痛哭<br />
本以为过去了这些时间我好了，结果还是时不时的会反复出现之前情绪状况，唉，这是生病了吗，要不要看医生</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>生病</tag>
      </tags>
  </entry>
  <entry>
    <title>学习小站</title>
    <url>/2018/08/10/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%AB%99/</url>
    <content><![CDATA[<hr />
<p>每天下了班学习前端，经过记不清的日日夜夜，写出了一个网站，因为域名xxx.club已经不能访问，所以只展示图示，以作纪念。</p>
<ul>
<li>图示<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20220810/1.14zp2i5vemyk.webp"
                      alt="image" 
                ><br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20220810/2.62b741bp8jk.webp"
                      alt="image" 
                ><br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20220810/3.5vz2pdiux8c0.webp"
                      alt="image" 
                ><br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20220810/4.75amganjpf00.webp"
                      alt="image" 
                ></li>
</ul>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>一段往事</tag>
      </tags>
  </entry>
  <entry>
    <title>宏碁E5-471G-540E装内存条</title>
    <url>/2020/05/20/%E5%AE%8F%E7%A2%81E5-471G-540E%E8%A3%85%E5%86%85%E5%AD%98%E6%9D%A1/</url>
    <content><![CDATA[<h3 id="宏碁-e5-471g-540e装内存条"><a class="markdownIt-Anchor" href="#宏碁-e5-471g-540e装内存条"></a> 宏碁 E5-471G-540E装内存条</h3>
<blockquote>
<p>第一次拆机装内存条，查了许多，但是都没有找到与我这台笔记本一样的拆机视频，于是决定自己录制一个，希望可以帮助到有需要的朋友。</p>
</blockquote>
<h5 id="拆机工具"><a class="markdownIt-Anchor" href="#拆机工具"></a> 拆机工具</h5>
<ul>
<li>螺丝刀</li>
<li>垫片</li>
</ul>
<h5 id="内存条一个"><a class="markdownIt-Anchor" href="#内存条一个"></a> 内存条一个</h5>
<ul>
<li>海力士 DDR3L 1600MHz（我的）</li>
</ul>
<p>你需要自己查看内存条信息，然后再去购买。</p>
<h5 id="查看方法"><a class="markdownIt-Anchor" href="#查看方法"></a> 查看方法</h5>
<ul>
<li>鲁大师 -》 硬件检测 -》 内存信息</li>
<li>任务管理器（Ctrl+Alt+Del快捷键） -》 性能 -》 内存</li>
</ul>
<h5 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h5>
<ul>
<li>螺丝要保管好。拆下来的螺丝一定要放好，最好是用一个容器装着</li>
<li>注意板与板之间连接的线，避免将线扯断</li>
<li>卸小风扇的时候，注意电源插口处的开关</li>
<li>插拔内存条，注意角度及两侧阀门</li>
</ul>
<blockquote>
<p>本人也是第一次拆机，拆完了之后觉得不过如此，只要胆大心细，做好拆机前的准备，在拆机过程中，注意多观察就好了。</p>
</blockquote>
<p>以上就是这次拆机的过程了，希望可以帮助到想要拆机的朋友。<br /><br />
再次声明，笔记本电脑为<strong>宏碁 E5-471G-540E</strong>,请酌情参考该机型的拆机过程。</p>
<!-- <iframe src="//player.bilibili.com/player.html?aid=883219006&bvid=BV1NK4y1t7NW&cid=191701372&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" style='width:100%'  allowfullscreen="true"> </iframe> -->
<iframe style="width:100%;height:400px" src="//player.bilibili.com/player.html?bvid=BV1NK4y1t7NW&cid=191701372&page=1" scrolling="no" border="0" frameborder="no" framespacing="0"></iframe>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>内存条</tag>
        <tag>拆机</tag>
      </tags>
  </entry>
  <entry>
    <title>客服消息发送收款码之异想天开</title>
    <url>/2020/07/23/%E5%AE%A2%E6%9C%8D%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%94%B6%E6%AC%BE%E7%A0%81%E4%B9%8B%E5%BC%82%E6%83%B3%E5%A4%A9%E5%BC%80/</url>
    <content><![CDATA[<h4 id="客服消息"><a class="markdownIt-Anchor" href="#客服消息"></a> 客服消息</h4>
<p>最近想在小程序中实现收款的功能，但是个人小程序不能开发支付类，所以想通过收款码来实现，最开始是想给一个图片然后引导长按识别就完事了，结果小程序中不能识别二维码…那就不做了吗，不，为了赚点钱(no way)绞尽脑汁，于是想着从客服消息那里，发送收款码，这样就可以识别了。<br /></p>
<p>第一步：开发者工具 -》 云开发 -》 设置 -》  全局设置 - 添加消息推送配置。消息类型对应收包的 MsgType，事件类型对应收包的 Event。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/22/kdsbcO7Ua5oVzPn.png"
                      alt="F2E81327-EAE3-46ff-8321-8304809B7EF6.png" 
                ></p>
<p>第二步：云函数中处理消息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/22/OpARGLzFWjtoS5H.png"
                      alt="ddddBC.png" 
                ></p>
<p>云函数中config.json的配置</p>
<blockquote>
<p>需在 config.json 中配置 customerServiceMessage.uploadTempMedia API 的权限，<a class="link"   href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/openapi/openapi.html#%E4%BA%91%E8%B0%83%E7%94%A8" >详情<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;openapi&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;customerServiceMessage.uploadTempMedia&quot;</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="string">&quot;customerServiceMessage.send&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>最终效果</strong></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/22/t5MmlWnZXHQOAb9.png"
                       style="width:220px;height:400px"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/22/POzf1wSTKv5RuDm.jpg"
                       style="width:220px;height:400px"
                >
<br />
<br />
<br /><br />
<p>注意:<br />
以上这种方法，的确实现了在特定入口进入会话页时，客服主动发送收款码的需求，但是！！！ 这种实现是有前提的，那就是需要客户主动与小程序产生了交互，小程序才有5次发送消息的次数，假设次数用完，小程序是发送不了信息的。另外如果用户在48小时内再次产生交互，那么又会获得5次机会，但不叠加。 于是，我笑了。<br />
这里是<a class="link"   href="https://developers.weixin.qq.com/miniprogram/introduction/custom.html#%E4%B8%8B%E5%8F%91%E6%9D%A1%E4%BB%B6%E8%AF%B4%E6%98%8E" >文档<i class="fas fa-external-link-alt"></i></a></p>
<p>于是，我开始思考人生的意义，人生是不是永无止境的轮回，时间在哪里停止，又在哪里结…</p>
<p>想了半天，还是老老实实做引导页吧，所谓引导页就是引导着用户往火坑里，哦不，往美好的圈里跳…</p>
<p>代码部分</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/23/Q79X1PdkvTzyCsW.png"
                      alt="1233123213DCA6-4ccf-9143-0771D0417FAF.png" 
                ></p>
<p>到这里就实现了，用户发送“打赏”，返回打赏码的功能，但是怎么让用户知道发送打赏呢，于是不会PS的我，硬生生做了几个图出来…生活太苦了。</p>
<img  style="width:220px;height:400px" 
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/23/VNqmf1dQAEWGPCS.gif"
                      
                >
<img   style="width:220px;height:400px" 
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/23/XtqiN1kcyQFRbKS.gif"
                      
                >
<br />
<br /><br />
于是我用这些图做了一个引导页，每次点击下一页的时候，动态切换背景图，就简单实现了一个引导页功能吧，真是脑洞大开，看到这里的朋友，有兴趣可以微信搜索，长安酒馆，在小程序里打赏点吧。
<br />
<br /><br />
<p><strong>给钱！</strong></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>收款</tag>
        <tag>客服</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序图片内容检测</title>
    <url>/2020/07/17/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h3 id="检测违规图片"><a class="markdownIt-Anchor" href="#检测违规图片"></a> 检测违规图片</h3>
<blockquote>
<p>在小程序里做了一个图床，结果在审核时提醒说图片没有经过内容审核，会导致小程序的滥用，于是开始做图片的内容审核，也就是黄色，政治这些敏感信息的自动过滤</p>
</blockquote>
<p>踩了一些坑，记录一下</p>
<p>文档 <a class="link"   href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.imgSecCheck.html" >https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/sec-check/security.imgSecCheck.html<i class="fas fa-external-link-alt"></i></a> <br /></p>
<p>注意： 我是在云函数里调用该API</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取buffer res.path为上传图片的路径</span></span><br><span class="line"><span class="keyword">let</span> buffer = wx.<span class="title function_">getFileSystemManager</span>().<span class="title function_">readFileSync</span>(res.<span class="property">path</span>)</span><br><span class="line"><span class="comment">// 调用云函数判断图片内容是否涉黄 违规</span></span><br><span class="line">wx.<span class="property">cloud</span>.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;checkImages&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;<span class="attr">imageUrl</span>:buffer,<span class="attr">type</span>:res.<span class="property">type</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 云函数入口</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line"> <span class="comment">// 调用cloud.openapi.security.imgSecCheck </span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span>  cloud.<span class="property">openapi</span>.<span class="property">security</span>.<span class="title function_">imgSecCheck</span>(&#123;</span><br><span class="line">      <span class="attr">media</span>: &#123;</span><br><span class="line">        <span class="attr">contentType</span>: <span class="string">`image/<span class="subst">$&#123;event.type&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">value</span>:  <span class="title class_">Buffer</span>.<span class="title function_">from</span>(event.<span class="property">imageUrl</span>)  <span class="comment">// 这里传一个buffer </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>内容检测</tag>
        <tag>一个小坑</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序--小牛练英语</title>
    <url>/2021/08/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%B0%8F%E7%89%9B%E7%BB%83%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<p>😊</p>
<blockquote>
<p>微信搜索“小牛练英语”，即可开启学习英语之旅</p>
</blockquote>
<p><b>优势</b><br /></p>
<ol>
<li>海量题库练不停</li>
<li>错题本–记录每一道错题，巩固练习</li>
<li>做题记录–记录每次的做题记录，进步一目了然</li>
<li>学习证书–根据你的做题记录生成证书</li>
<li>特权标识–获取更多VIP特权</li>
</ol>
<p>👏👏👏</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://z3.ax1x.com/2021/08/10/fYN1PA.jpg"
                      alt="fYN1PA.jpg" 
                ></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>性格缺陷是天生的吗</title>
    <url>/2021/04/30/%E6%80%A7%E6%A0%BC%E7%BC%BA%E9%99%B7%E6%98%AF%E5%A4%A9%E7%94%9F%E7%9A%84%E5%90%97/</url>
    <content><![CDATA[<p>感觉自己只有在写代码的时候可以心无旁骛，可以开心。其他时候都很难和别人正常交流，总觉得话不知如何说，很难受，这是性格缺陷吗，还能改吗</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>我所理解的生活</title>
    <url>/2020/05/28/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<h4 id="我所理解的生活"><a class="markdownIt-Anchor" href="#我所理解的生活"></a> 我所理解的生活</h4>
<blockquote>
<p>在很长一段时间，双脚终于替代了思考，开始了停不下来的生活</p>
</blockquote>
<p>&lt;-- part1 --&gt;</p>
<p>在2016年的夏日，阿坤剪着一头寸发，快步向我走来，我说等等，我先把这个人杀了。<br />
阿坤在我旁边坐了十几分钟，却没感受到他的不耐烦，我心中大概猜到，他是来道别的。<br />
阿坤终于坐上了去往军旅的列车，在此之前他做了激光手术，将近视治好，我说你行啊，再也不用戴眼镜了，阿坤说后遗症就是老了会得白内障。</p>
<p>&lt;-- part2 --&gt;</p>
<p>在高二的时候，夏天，阿坤急匆匆到我宿舍找到我，说他宿舍走了几个，要我搬过去，从那以后，我再也想不起来当时我的室友都是谁。<br />
阿坤那间宿舍还不错，很阴凉，正适合夏天住。我们每天晚上都聊的很晚，至此也想不起当时宿舍的其他的模样了。<br />
有天晚上，阿坤说，我马上要辍学了，去山东，打工去，本以为是开玩笑，因为潜意识里好像觉得能待学校一辈子似的。<br />
夏天总是过的很慢，但是那个夏天似乎只有一天，每当想起，好像什么都没经历过似的，为什么我完全想不起那三年都发生了什么。只记得寥寥片段。感觉我也是成才，只是没有成才的本事。</p>
<p>&lt;-- part3 --&gt;</p>
<p>后来，18年毕业，一列13个小时的火车，带走了我所有的青春，只留下我独自前行的身影。</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>青春</tag>
        <tag>忘记</tag>
      </tags>
  </entry>
  <entry>
    <title>拦截器</title>
    <url>/2020/09/17/%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h4 id="nestjs-拦截器"><a class="markdownIt-Anchor" href="#nestjs-拦截器"></a> Nestjs 拦截器</h4>
<p>拦截器是使用@Injectable()装饰器注解的类。拦截器应该实现NestInterceptor接口。<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://docs.nestjs.com/assets/Interceptors_1.png"
                      alt="image" 
                ></p>
<blockquote>
<p>这里学习拦截器，是为了避免接口被恶意调用，而做了一个限制拦截，从请求头判断请求来源，然后做相应的响应。</p>
</blockquote>
<ul>
<li>新建一个拦截器apiverification.interceptor.ts</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>,<span class="title class_">NestInterceptor</span>,<span class="title class_">ExecutionContext</span>,<span class="title class_">CallHandler</span>, <span class="title class_">HttpException</span>, <span class="title class_">HttpStatus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">apiverification</span> implements <span class="title class_">NestInterceptor</span>  &#123;</span><br><span class="line">    <span class="title function_">intercept</span>(<span class="attr">content</span>: <span class="title class_">ExecutionContext</span>,<span class="attr">next</span>: <span class="title class_">CallHandler</span>): <span class="title class_">Observable</span>&lt;any&gt; &#123;</span><br><span class="line">        <span class="comment">// 获取请求体</span></span><br><span class="line">        <span class="keyword">const</span> response = content.<span class="title function_">switchToHttp</span>().<span class="title function_">getResponse</span>();</span><br><span class="line">        <span class="keyword">if</span>(response.<span class="property">req</span>.<span class="property">headers</span>.<span class="property">origin</span> !== <span class="string">&#x27;http://xxx.xx&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">// 这里抛出一个无权限状态并返回提示信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(&#123;<span class="attr">errcode</span>: <span class="number">40010</span>, <span class="attr">errmsg</span>: <span class="string">&#x27;你无权调用API接口，也不应该使用该站点的任何数据来填充个人网站或其他用途。&#x27;</span>&#125;, <span class="title class_">HttpStatus</span>.<span class="property">FORBIDDEN</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next.<span class="title function_">handle</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br />
非本站访问时，就会返回一个json
<br />
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/09/17/XGOZJiNz1Fkyu2W.png"
                      alt="image" 
                ></p>
]]></content>
      <categories>
        <category>Nest</category>
      </categories>
      <tags>
        <tag>Nest</tag>
      </tags>
  </entry>
  <entry>
    <title>放弃幻想，轻装前行</title>
    <url>/2022/08/13/%E6%94%BE%E5%BC%83%E5%B9%BB%E6%83%B3%EF%BC%8C%E8%BD%BB%E8%A3%85%E5%89%8D%E8%A1%8C/</url>
    <content><![CDATA[<blockquote>
<p>周末闲来无事，有写东西的一股冲动， 就当是一种放松吧。</p>
</blockquote>
<h4 id="旅行"><a class="markdownIt-Anchor" href="#旅行"></a> 旅行</h4>
<p>为什么想旅行？<br />
旅行有一个好处，就是对于目的地只是暂留一段时间，而不是定居。这样对于那里的风景人文都属于走马观花，而不需要了解不好的一面，所以对于旅行，人是放松的。玩几天就走了，玩的开心，下次还来，玩的不好，就再见了。<br />
我是在微博上看到的一个旅行博主，叫杨旭游记，杨旭开着房车环游中国，看的我心痒难耐，也很想自驾游。<br />
于是，我这个从没去玩过的人开始幻想如何自驾游。<br />
首先，我要准备好换装的轮胎，备用的汽油，一定量的食物和水，一份中国地图，一种或多种防身的器械，换洗的衣服若干。<br />
当然，剩下的就是规划路线，这让我有些不好抉择。<br />
有这么几个大方向的路线：</p>
<ul>
<li>河南-山东-天津-北京-河北-山西-陕西-重庆-湖北-河南</li>
<li>河南-陕西-甘肃-青海-新疆-西藏-原路返回</li>
<li>河南-安徽-浙江-上海-江苏-山东-河南</li>
</ul>
<p>规划到这里，我还是不知道怎么规划自驾游的路线。<br />
我想看美丽的大山东去爬泰山，我想去天津听相声吃包子，我想去西藏净化心灵大哭一场，可是我还是不知道如何开始，以及是否有能力完成规划好的路线。<br />
怎么能没有可爱的大熊猫呢，怎么能没有广阔的大草原呢，中国这么大，人这么多，一路上肯定会有各种各样的问题和感动。<br />
我喜欢人们朴实的情感和温暖，我喜欢好吃的食物和果腹感。<br />
可是，幻想到这里，我连车子都没有，如何完成自驾游呢，我是不是应该先买一辆车，是不是要先学会如何修车和关于汽车的各种知识，是不是要锻炼应对突发情况的技能。<br />
我喜欢阳光洒在身上的触感。</p>
<h4 id="骑行"><a class="markdownIt-Anchor" href="#骑行"></a> 骑行</h4>
<p>上学时，我骑着借来的山地自行车，在学校周围骑来骑去，很是惬意，无所事事，没有烦恼的惬意。<br />
直到去年，通过团建我才再次骑着车环岛骑行，非常放松和舒适。于是我又开始了想要买一辆属于自己的山地自行车的幻想，除了用来上下班最后一公里的通勤外，还可以在闲暇时间去穿过大街小巷，穿过人山人海，享受着风在身上掠过的清爽，领略四周向我身后快速退去的感觉，保持着注意力在道路之上驰骋。<br />
去年开始我开始统计和总结一年之中做到和没做到的事情，凡是做到的事情我把它公开记录，凡是没有做到的事情我偷偷的为自己感到惭愧和对时间不复返的遗憾。回看这些用数据统计的事情，会有一种成就感，哪怕只是某段时间坚持了跑步和阅读，或者吃到了一顿可口的饭菜，这些都会让我感到舒服。<br />
可是骑行的事情却一直没有落实，这让我对时间的飞逝感到有些焦虑，我担心时间就这么过去了，而我一无所获的原地不动。<br />
我不喜欢感受时间的飞逝感，可随着一天一天的过去，我为自己的懒惰感到惭愧。<br />
我幻想我有一辆山地自行车，穿梭在树荫密布的道路上，穿梭在铺满玉米的道路上，就像那时我骑着红色的山地自行车穿梭在去姥姥家的道路上，我很怀念那段时光。</p>
<h4 id="吃饭"><a class="markdownIt-Anchor" href="#吃饭"></a> 吃饭</h4>
<p>如果有一顿饭是让我能提起胃口的，那么不管多少钱我都愿意为之买单。<br />
食欲和胃口对我而言有点稀少，我很少在到饭点时能提起胃口，最后不得不选择昨日的选择，我想吃放学时回到家就已做好的饭菜，我想吃充满香味的汤面，我想吃新做的茶叶蛋…<br />
我想坐在阳光充裕的院子里大口吃面条，吃完再来一碗，还不用刷碗。<br />
我想在傍晚吃着馒头和炒肉，最后再喝上一碗米茶，米一定不要太熟。<br />
我想再炸一次火腿肠，就像少年时享受着装满一碗的快乐。<br />
我想去吃一顿每一个都双份的肯德基，吃不完没关系，带回去慢慢吃。<br />
我还想吃一个属于我的生日蛋糕，我要先吃奶油，再吃底下的面包。<br />
那该有多快乐。</p>
<h4 id="日子"><a class="markdownIt-Anchor" href="#日子"></a> 日子</h4>
<p>我想要拥抱正常和幸福的生活，过上一日三餐，周末春游的小日子。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>轻装前行</tag>
      </tags>
  </entry>
  <entry>
    <title>数字滚动插件</title>
    <url>/2020/07/30/%E6%95%B0%E5%AD%97%E6%BB%9A%E5%8A%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="数字滚动"><a class="markdownIt-Anchor" href="#数字滚动"></a> 数字滚动</h4>
<blockquote>
<p>一直想找一个数字滚动的插件，但是一直没找到合适的，于是自己动手撸了一个，纯JS打造，觉得喜欢的可以Star</p>
</blockquote>
<p>github地址： <a class="link"   href="https://github.com/sonderss/NumberScrolling" >https://github.com/sonderss/NumberScrolling<i class="fas fa-external-link-alt"></i></a> <br /></p>
<p>npm安装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i numberscrolling --save </span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue项目使用示例</span></span><br><span class="line"></span><br><span class="line">&lt;view id=<span class="string">&#x27;t&#x27;</span>&gt;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CbuildNumber</span> <span class="keyword">from</span> <span class="string">&#x27;numberscrolling&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> obj  =&#123;</span><br><span class="line">      dom,</span><br><span class="line">      <span class="attr">num</span>: <span class="string">&quot;3565648&quot;</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#1890FF&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> t = <span class="keyword">new</span> <span class="title class_">CbuildNumber</span>(obj)</span><br><span class="line">  t.<span class="title function_">start</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>最终效果</p>
<img   
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2020/07/31/9erkxtimv5H3ADj.gif"
                      style='width:294px;height:235px'  
                > 
<p>视频体验 <a class="link"   href="https://streamja.com/1jZy6" >在线视频<i class="fas fa-external-link-alt"></i></a></p>
<p>github地址 <a class="link"   href="https://github.com/sonderss/NumberScrolling" >项目预览<i class="fas fa-external-link-alt"></i></a></p>
<p>个人地址 <a class="link"   href="http://sonderss.qicp.vip/numberScrolling/#/" >浏览器预览<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数字滚动</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库操作</title>
    <url>/2022/09/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>创建HTML页面，可视化数据操作</p>
</blockquote>
<h4 id="配置视图解析器"><a class="markdownIt-Anchor" href="#配置视图解析器"></a> 配置视图解析器</h4>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">resources</span> <span class="string">-》</span> <span class="string">application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置视图解析器  </span></span><br><span class="line"><span class="string">spring.mvc.view.prefix=</span> <span class="string">/</span></span><br><span class="line"><span class="string">spring.mvc.view.suffix=</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure>
<p>在resources目录下，找到templates目录，并创建一个html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入在static -》 js -》 jquery文件 这里需要注意 ../, ./, / 的区别--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- body 里内容为form表单，根据对应输入框ID操作数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;table&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里内容根据数据 动态追加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="创建控制器"><a class="markdownIt-Anchor" href="#创建控制器"></a> 创建控制器</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="comment">//@RestController</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  String <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addUser&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>视图如下：</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>年龄</th>
<th>性别</th>
</tr>
</thead>
<tbody>
<tr>
<td>sonder</td>
<td>18</td>
<td>1</td>
</tr>
<tr>
<td>oldFriend</td>
<td>17</td>
<td>0</td>
</tr>
</tbody>
</table>
<h4 id="数据操作"><a class="markdownIt-Anchor" href="#数据操作"></a> 数据操作</h4>
<p>sql语句可参考 <a class="link"   href="https://www.runoob.com/mysql" >https://www.runoob.com/mysql<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加用户</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/AddUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">AddUser</span> <span class="params">(String name, Number age, String sex)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO user (name, age, sex) VALUES (?,?,?);&quot;</span>;</span><br><span class="line">    HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> jdbcTemplate.update(sql, name, age, sex);</span><br><span class="line">    <span class="comment">// getResult为封装的函数，处理返回给前端的数据</span></span><br><span class="line">    <span class="keyword">return</span> getResult(result, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据用户名删除用户</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/DelUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span>  Object <span class="title function_">DelUser</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE  FROM  user WHERE name=?;&quot;</span>;</span><br><span class="line">    HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> jdbcTemplate.update(sql, name);</span><br><span class="line">    <span class="keyword">return</span> getResult(result, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接</title>
    <url>/2022/09/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h4 id="关系型数据库mysql"><a class="markdownIt-Anchor" href="#关系型数据库mysql"></a> 关系型数据库MySQL</h4>
<blockquote>
<p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>
</blockquote>
<h5 id="mysql特点"><a class="markdownIt-Anchor" href="#mysql特点"></a> MySQL特点</h5>
<ul>
<li>体积小</li>
<li>速度快</li>
<li>成本低</li>
</ul>
<h4 id="连接"><a class="markdownIt-Anchor" href="#连接"></a> 连接</h4>
<p>在java项目下的 <strong>resources</strong> 目录中找到 <strong>application.properties</strong> 文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="string">spring.application.name=demo</span></span><br><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="string">server.port=8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库名称</span></span><br><span class="line"><span class="string">spring.datasource.name=javastudy</span></span><br><span class="line"><span class="comment"># 数据库连接URL</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/数据库名称?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line"><span class="string">spring.datasource.password=XXX</span></span><br><span class="line"><span class="comment"># 数据库驱动</span></span><br><span class="line"><span class="string">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<h4 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题</h4>
<p>由于我在创建项目中并没有直接安装MySQL相关依赖，于是直接在 <strong>pom.xml</strong> 中添加，代码如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这里需要注释 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;5.3.20&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="问题示例"><a class="markdownIt-Anchor" href="#问题示例"></a> 问题示例</h4>
<p>在一切准备就绪后，启动报错，如“The server time zone value ‘�й���׼ʱ��‘ is unrecogni…”, 这是时区问题，在连接数据库时，加上UTC即可。<br /><br />
还有“To display the conditions report re-run your application with ‘debug’ enable…”，这里是在添加了依赖后，由于“spring-jdbc”重复导致，注释后就可以了，此外在整个过程中，重启IDE几次，以及右侧Maven刷新了几次，最终解决问题，完美连接上数据库以及获取数据</p>
<h4 id="获取数据"><a class="markdownIt-Anchor" href="#获取数据"></a> 获取数据</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/GetUserFromDB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List <span class="title function_">GetUserFromDB</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select  * from user&quot;</span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(sql);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>最近几个月的生活状态</title>
    <url>/2021/12/21/%E6%9C%80%E8%BF%91%E5%87%A0%E4%B8%AA%E6%9C%88%E7%9A%84%E7%94%9F%E6%B4%BB%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p>8点40出门，（走路加公交加地铁一个小时二十分钟左右通勤）<br />
9点五十吃完早饭<br />
十点开始工作<br />
十一点半吃饭<br />
十二点午觉或者看小说<br />
一点开始工作<br />
六点多下班卷（/一会儿）<br />
九点吃晚饭<br />
十点洗漱完上床看小说玩手机<br />
十二点关掉手机预备睡觉<br />
凌晨二点半左右开始有困意<br />
几乎每天都在重复，晚上睡不着真的很痛苦，胡思乱想</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>状态</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的生活感悟</title>
    <url>/2021/06/01/%E6%9C%80%E8%BF%91%E7%9A%84%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<p>🌱 生活感悟<br />
如果没有自己的兴趣爱好，生活将变的很空洞，如果可以专注于一件事情，并且付出时间去做，那么会活的更加自由，更专注于自己的提升，而可以不被琐事所困扰，也不会庸人自扰</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>来机场来早了</title>
    <url>/2021/06/05/%E6%9D%A5%E6%9C%BA%E5%9C%BA%E6%9D%A5%E6%97%A9%E4%BA%86/</url>
    <content><![CDATA[<p>为了赶飞机起个大早，看着时间，结果还是来早了，等航班真不舒服</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>飞机</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2019/05/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>正则表达式<br />
i :不区分大小写<br />
g:全局匹配<br />
*： 0个或多个<br />
‘+’  至少一个<br />
\s  匹配空格<br />
\S 不匹配空格<br />
\  ：  转义<br />
\n ： 换行<br />
Test()方法 返回布尔值，看是否匹配正则表达式；<br />
Search()方法  返回所匹配的字符是从哪一个索引开始的；<br />
Split()方法  以参数分隔，参数即正则表达式；<br />
Match()方法  将匹配到的结果放到数组中并返回，参数为定义的正则；</p>
<p>邮箱格式：<br />
<code>/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</code></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>生产环境中使用Vue3+TS+Vite</title>
    <url>/2021/12/27/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8Vue3-TS-Vite/</url>
    <content><![CDATA[<h3 id="在生产环境中使用vue3tsvite"><a class="markdownIt-Anchor" href="#在生产环境中使用vue3tsvite"></a> 在生产环境中使用Vue3+TS+Vite</h3>
<blockquote>
<p>最近在新的项目中使用了Vue3，也是第一次在生产环境中使用Vue3做项目，很像写<a class="link"   href="https://react.docschina.org/" >React<i class="fas fa-external-link-alt"></i></a>但比React写起来舒服</p>
</blockquote>
<ul>
<li>没有了this的使用</li>
<li>根据TS定义接口，编写类型，在编译过程中就能避免低级错误，代码可阅读性强</li>
<li>Model的定义，在请求接口时返回的数据结构及类型，便于维护和一目了然的字段管理. 安装插件json2ts. 使用快捷键ctrl+alt+x来生成Model的接口(windows)</li>
<li>使用axios-mapper发起网络请求，更方便对Model进行使用，整体比axios更方便感觉</li>
<li>scss的使用使得一些常用样式的封装的更加方便，之前不是很懂的语法现在也可以熟练使用，算是一次进步吧</li>
<li>由于第一次使用，没有办法说出更深度的内容，只是一种在开发过程中的体验<br />
<br /><br />
<br /></li>
</ul>
<p>在开发过程中，Vite的热更新非常快，但是有时也会需要自己手动刷新才会生效，不知是否与我用的Vscode的终端有关，总之速度效率上还是非常给力的.<br /><br />
在配置vite.config.js中可以参考<br />
<a class="link"   href="https://vitejs.dev/config/" >vitejs<i class="fas fa-external-link-alt"></i></a></p>
<br />
<br />
<p>在修改main.js为main.ts时，编辑器报错，解决办法为根目录创建一个文件shims.d.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span> &#123; <span class="title class_">ComponentOptions</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">componentOptions</span>: <span class="title class_">ComponentOptions</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> componentOptions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br />
<br />
byebye]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue3</tag>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>知乎</title>
    <url>/2019/02/18/%E7%9F%A5%E4%B9%8E/</url>
    <content><![CDATA[<hr />
<p>仿照知乎的网页登录做了一个静态页面</p>
<ul>
<li>部分代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;firsttable1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: darkgray; font-size: 15px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;中国 + 86&quot;</span>&gt;</span>中国 + 86<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;美国 + 1&quot;</span>&gt;</span>美国 + 1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;西班牙+ 34&quot;</span>&gt;</span>西班牙+ 34<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#c5e3fd</span>; </span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">img/知乎背景.png</span>); </span><br><span class="line">    <span class="comment">/* 不重复*/</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat; </span><br><span class="line">    <span class="comment">/* 效果与100% 100%相同   等比例展现*/</span></span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="comment">/* 不让背景图滑动 */</span></span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zhihu</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">434px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">538px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="comment">/* 居中 显示 并且微调 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">45px</span> auto;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder&#123;</span><br><span class="line">    <span class="comment">/*浅灰色*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8590A6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>图示<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20220810/zh.90gdzo37i3s.webp"
                      alt="image" 
                ></li>
</ul>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>练手</tag>
      </tags>
  </entry>
  <entry>
    <title>穷查理宝典</title>
    <url>/2022/11/09/%E7%A9%B7%E6%9F%A5%E7%90%86%E5%AE%9D%E5%85%B8/</url>
    <content><![CDATA[<blockquote>
<p>简单是长期努力工作的结果，而不是起点<br />
——《穷查理宝典》</p>
</blockquote>
<p>今天终于读完了《穷查理宝典》，耗时20时8分。每当读到书中某些观点或道理或事实时，总是给我一种茅塞顿开，豁然开朗的愉悦。<br />
查理-芒格是一位著名的投资家，伯克希尔-哈撒韦的副主席。<br />
以前只听说巴菲特，事实上巴菲特和查理认识于1959年，至今已有半个世纪了。比较有趣的是，查理年轻时还在巴菲特家里的店铺干过活，但那时他们并没见过面。<br />
查理非常有智慧，像是一位智者，他说他从没见过哪个聪明人不每天阅读的———一个都没有。<br />
我也经常想阅读到底会带来什么，我大多数的阅读时间是在路上，比如地铁公交上，上厕所时，遇到周末偶尔才连续性读上3个小时，所以我不是一个爱读书的人，至少比起专门花时间去读书我更喜欢出去走走，但即使是很少的阅读时间，也让我在今年11个月里看完了16本书，293.9万字，平时丝毫没注意到竟然读了这么多，可见坚持一件小事，经过时间的积累，就能够发生自己意想不到的结果。<br />
那么读书给我来了什么，我看的大多数是经济学或者社会历史类的书，小说占3/16，其实比较起来，小说是最容易读只有偶尔才会停下来体会其中寓意，而经济学类的书，由于专业词（陌生）较多，有点难读，但是一些实例读起来很有意思，会有些豁然开朗之感。但是往往读完就忘记了。<br />
可是并不是完全的忘记，有时会在生活中遇到一些事情，我却能分辨出一些原理或本质，我会开心的不得了，于是又会多看一些。<br />
可是我却写不出我的感觉，无法精确的用文字来描述，所以假如你读到了我这篇文字，希望你也能多看书，去体会那种妙不可言。<br />
有时看到晦涩难懂之处，我往往是本能的快速浏览过去，可是这完全是自欺欺人，于是会去查资料，然后重新再读，这样做的多了，有种做研究的感觉，所以痛苦也是常有的，但就像开头那句话一样，<code>简单是长期努力工作的结果，而不是起点</code>。<br />
这本书让我发生了一些变化，那就是积极的面对问题，保持阅读的习惯，虽不能让我发大财，可是能够学会开心聪明的生活也算是一种更好的收获了。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐</title>
    <url>/2019/08/15/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<hr />
<p>使用react + 网易云服务接口，自己做了一个音乐播放器</p>
<ul>
<li>图示<br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20220810/6.1g41u4apwun4.webp"
                      alt="image" 
                ><br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20220810/1.4juejniy9y80.webp"
                      alt="image" 
                ><br />
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sonderss/image-hosting@master/20220810/5.2dz459utcet.webp"
                      alt="image" 
                ></li>
</ul>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>自卑</title>
    <url>/2022/01/13/%E8%87%AA%E5%8D%91/</url>
    <content><![CDATA[<p>我有那么不堪吗？为何如此自卑？</p>
]]></content>
      <categories>
        <category>自言自语</category>
      </categories>
      <tags>
        <tag>自卑</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义指令</title>
    <url>/2019/07/12/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="自定义指令"><a class="markdownIt-Anchor" href="#自定义指令"></a> 自定义指令</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Vue.directive(&#x27;名字&#x27;,&#123;</span><br><span class="line">    inserted:function(el)&#123;/*这个元素插入父元素执行的操作*/</span><br><span class="line">        el.focus();//el代表的是使用这个指令的元素</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>==相关参数：==</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>el</td>
<td>指令所绑定的元素，可以用来直接操作Dom</td>
</tr>
<tr>
<td>binding</td>
<td>一个对象包含如下属性：</td>
</tr>
</tbody>
</table>
<ol>
<li>name:指令名，但不包括v-前缀。</li>
<li>value：指令的绑定值。</li>
<li>oldValue:指令绑定的前一个值。</li>
<li>expression：绑定值的字符串形式。</li>
</ol>
<h5 id="钩子函数"><a class="markdownIt-Anchor" href="#钩子函数"></a> 钩子函数：</h5>
<p>bind:只调用一次，指令第一次绑定到元素时调用。<br><br />
inserted:被绑定元素插入父节点时调用。<br><br />
update：被绑定元素所在的模板更新时调用。<br><br />
conmponentUpdated：被绑定元素所在模板完成一次更新周期时调用。<br></p>
<h3 id="自定义指令的简写形式"><a class="markdownIt-Anchor" href="#自定义指令的简写形式"></a> 自定义指令的简写形式：</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在实例外创建</span><br><span class="line">Vue.directive(&#x27;name&#x27;,function(el,bind)&#123;</span><br><span class="line">    //所要执行的操作</span><br><span class="line">&#125;)</span><br><span class="line">//在实例内创建</span><br><span class="line">directives:&#123;</span><br><span class="line">    &#x27;name&#x27;:function(el,bind)&#123;</span><br><span class="line">        //所要执行的操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el:&#x27;app&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        info:&#x27;yellow&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    directives:&#123;</span><br><span class="line">        &#x27;changeColor&#x27;:function(el,bind)&#123;</span><br><span class="line">            el.style.color=&#x27;red&#x27;//直接给值</span><br><span class="line">            el.style.color = bind.value //这个value是el标签中 v-changerColor = &#x27;info&#x27;的值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>获取url参数</title>
    <url>/2022/09/08/%E8%8E%B7%E5%8F%96url%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<p>从URL中获取参数的封装方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryString</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(^|&amp;)&quot;</span> + e + <span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>, <span class="string">&quot;i&quot;</span>),</span><br><span class="line">        n = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>).<span class="title function_">match</span>(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span> != n ? <span class="built_in">unescape</span>(n[<span class="number">2</span>]) : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getQueryString</span>(<span class="string">&quot;id&quot;</span>) <span class="comment">// 返回ID值</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次自己的生命之轮</title>
    <url>/2021/06/02/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%9F%E5%91%BD%E4%B9%8B%E8%BD%AE/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.loli.net/2021/06/02/Bt3jHDQzxoMh5V8.png"
                      alt="lALPF8XMjcFjHCvNAcnNAj4_574_457.png" 
                ><br />
<br />从这个结果来看个人生活太烂了，每天只有上下班的生活，希望以后能有改变吧</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生命之轮</tag>
      </tags>
  </entry>
  <entry>
    <title>零代码开发APP</title>
    <url>/2018/04/11/%E9%9B%B6%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91APP/</url>
    <content><![CDATA[<blockquote>
<p>叮当平台，零代码开发APP，速度快，模板多</p>
</blockquote>
<h4 id="为什么使用这个平台"><a class="markdownIt-Anchor" href="#为什么使用这个平台"></a> 为什么使用这个平台</h4>
<p>原因是想要做出一个能够安装到安卓手机上的应用，但不会写代码，于是找到了这个平台。</p>
<h4 id="用来做了什么"><a class="markdownIt-Anchor" href="#用来做了什么"></a> 用来做了什么</h4>
<p>叮当平台提供了很多模板，例如电商模板、外卖模板、新闻模板等等，我选择了电商模板，借用模板完成了<code>消息推送</code>，<code>菜单选项</code>，<code>页面/子页面</code>选择等等。<br />
其中，为了完成推送功能，我在优酷上传了一段录制视频，通过外链方式进行跳转打开，做到这里，感觉太有意思了。</p>
<h4 id="多少用户"><a class="markdownIt-Anchor" href="#多少用户"></a> 多少用户</h4>
<p>一共<code>两个</code>用户。</p>
<h4 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h4>
<p>做完这个APP我迫不及待分享给她，很是有成就感，但是也存在一些问题无法解决。<br />
这个APP我用了一个金毛狗作为ICON，蓝色作为底色，后来截图存了起来，但是找不到了，颇为遗憾。</p>
<p>后记：<br />
我一直觉得18年四月在家除了应付毕业论文外，还做了这样一个APP，每次想起都觉得奇妙，因为那时我甚至不知什么是代码。</p>
<p>后后记：<br />
18年8月开始学习编程<br />
19年至今开发APP成了我的工作，人生太有意思啦</p>
<p>最后：<br />
从18年开始使用的诺基亚手机用到2022年终究还是决定换掉了，于是又找了一遍该截图还是没有找到。</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2019/05/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>OOP 面向对象编程 OOA 面向对象分析  OOD面向对象设计;</p>
<blockquote>
<p>面向过程程序设计  先具体再整体;<br />
面向对象程序设计  先整体再具体;<br />
类  一个集合 多个对象共有属性和方法的一个集合;<br />
对象就是某个类型的具体的实例;</p>
</blockquote>
<p>封装函数：</p>
<ul>
<li>函数是否多次使用；</li>
<li>参数的设置  函数内部的有些值是需要改变的；</li>
<li>函数需不需要返回值；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.字面量定义；2.工厂函数；3.构造函数；4.原型对象；5.组合创建（构造函数和原型对象） 6.ES6语法创建（结合了组合创建，利用原型对象默认自带的constructor,   （语法糖））</span></span><br></pre></td></tr></table></figure>
<p>通过“工厂函数”创建的对象不好区分类，比如人 动物；</p>
<p>构造函数：一个函数在与new运算符之后系统内部会有四步：<br />
创建一个新对象；<br />
改变this指向  指向这个新对象；<br />
执行函数代码；<br />
返回这个值；</p>
<p>先定义一个函数，这个函数里的私有属性不会拿到，要通过实例属性来定义（this）,然后通过构造函数返回值；</p>
<p>通过构造函数的系统内的运算后  接受这个构造函数返回的值（创建的对象），来达到对所创建的对象的类型区分；<br />
使用构建函数的话  每次实例创建  都会创建一个新的实例方法  缺点：内存消耗；</p>
<p>原型对象：<br />
<code>每一个构建函数都有一个原型对象（prototype）; 每一个原型对象里都有一个指向构造函数的指针（constructor）； 原型对象上的属性和方法能被实例访问；</code></p>
<p>ES6语法来创建一个对象 通过原型对象里自带的constructor来写属性或方法，在其下面直接可写方法；</p>
<p>在构造函数内声明的变量  只能在内部访问到；<br />
这个变量称为私有属性，  不能成为实例的属性；</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>高效使用scss编写样式表</title>
    <url>/2021/12/09/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8scss%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F%E8%A1%A8/</url>
    <content><![CDATA[<p>使用scss的一些技巧学习<br /><br />
官网地址：<a class="link"   href="https://www.sass.hk/" >https://www.sass.hk/<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ====== 字体大小 ======</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">12</span> through <span class="number">30</span> &#123;</span><br><span class="line">    <span class="selector-class">.f</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: #&#123;<span class="variable">$i</span>&#125;px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ====== 处理状态样式 ======</span></span><br><span class="line"><span class="comment">// 注意这里的key和value不要带引号</span></span><br><span class="line"><span class="variable">$map</span>: (color_2: <span class="number">#ff9b00</span>, color_3: <span class="number">#e60e0e</span>);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$key</span>,<span class="variable">$value</span> in <span class="variable">$map</span> &#123;</span><br><span class="line">    .#&#123;<span class="variable">$key</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
</search>
